[
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html",
    "title": "In class exercise 05",
    "section": "",
    "text": "In this hands-on exercise, you will gain hands-on experience on how to delineate homogeneous region by using geographically referenced multivariate data. There are two major analysis, namely:\nhierarchical cluster analysis; and spatially constrained cluster analysis./"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#eda-using-statistical-graphics",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#eda-using-statistical-graphics",
    "title": "In class exercise 05",
    "section": "12.5.1 EDA using statistical graphics",
    "text": "12.5.1 EDA using statistical graphics\n\nradio &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ntv &lt;- ggplot(data=ict_derived, \n             aes(x= `TV_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nllphone &lt;- ggplot(data=ict_derived, \n             aes(x= `LLPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nmphone &lt;- ggplot(data=ict_derived, \n             aes(x= `MPHONE_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ncomputer &lt;- ggplot(data=ict_derived, \n             aes(x= `COMPUTER_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\ninternet &lt;- ggplot(data=ict_derived, \n             aes(x= `INTERNET_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\")\n\nggarrange(radio, tv, llphone, mphone, computer, internet, \n          ncol = 3, \n          nrow = 2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#eda-using-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#eda-using-choropleth-map",
    "title": "In class exercise 05",
    "section": "12.5.2 EDA using choropleth map",
    "text": "12.5.2 EDA using choropleth map\n\nshan_sf &lt;- left_join(shan_sf, \n                     ict_derived, by=c(\"TS_PCODE\"=\"TS_PCODE\"))\n  \nwrite_rds(shan_sf, \"data/rds/shan_sf.rds\")\n\n\nshan_sf &lt;- read_rds(\"data/rds/shan_sf.rds\")\nqtm(shan_sf, \"RADIO_PR\")\n\n\n\n\n\nTT_HOUSEHOLDS.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"TT_HOUSEHOLDS\",\n          n = 5,\n          style = \"jenks\", \n          title = \"Total households\") + \n  tm_borders(alpha = 0.5) \n\nRADIO.map &lt;- tm_shape(shan_sf) + \n  tm_fill(col = \"RADIO\",\n          n = 5,\n          style = \"jenks\",\n          title = \"Number Radio \") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(TT_HOUSEHOLDS.map, RADIO.map,\n             asp=NA, ncol=2)\n\n\n\n\n\ntm_shape(shan_sf) +\n    tm_polygons(c(\"TT_HOUSEHOLDS\", \"RADIO_PR\"),\n                style=\"jenks\") +\n    tm_facets(sync = TRUE, ncol = 2) +\n  tm_legend(legend.position = c(\"right\", \"bottom\"))+\n  tm_layout(outer.margins=0, asp=0)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#min-max-standardisation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#min-max-standardisation",
    "title": "In class exercise 05",
    "section": "Min-Max standardisation",
    "text": "Min-Max standardisation\n\nshan_ict.std &lt;- normalize(shan_ict)\nsummary(shan_ict.std)\n\n    RADIO_PR          TV_PR          LLPHONE_PR       MPHONE_PR     \n Min.   :0.0000   Min.   :0.0000   Min.   :0.0000   Min.   :0.0000  \n 1st Qu.:0.2472   1st Qu.:0.4420   1st Qu.:0.1141   1st Qu.:0.1974  \n Median :0.3935   Median :0.6064   Median :0.1820   Median :0.3700  \n Mean   :0.4142   Mean   :0.5734   Mean   :0.2509   Mean   :0.4068  \n 3rd Qu.:0.5184   3rd Qu.:0.7151   3rd Qu.:0.3653   3rd Qu.:0.5939  \n Max.   :1.0000   Max.   :1.0000   Max.   :1.0000   Max.   :1.0000  \n  COMPUTER_PR    \n Min.   :0.0000  \n 1st Qu.:0.1045  \n Median :0.1636  \n Mean   :0.2573  \n 3rd Qu.:0.3378  \n Max.   :1.0000"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#z-score-standardisation",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#z-score-standardisation",
    "title": "In class exercise 05",
    "section": "Z-score standardisation",
    "text": "Z-score standardisation\n\nshan_ict.z &lt;- scale(shan_ict)\ndescribe(shan_ict.z)\n\n            vars  n mean sd median trimmed  mad   min  max range  skew kurtosis\nRADIO_PR       1 55    0  1  -0.09   -0.07 0.95 -1.84 2.60  4.44  0.59    -0.19\nTV_PR          2 55    0  1   0.15    0.05 0.84 -2.52 1.88  4.40 -0.48    -0.29\nLLPHONE_PR     3 55    0  1  -0.34   -0.12 0.64 -1.25 3.74  5.00  1.38     2.14\nMPHONE_PR      4 55    0  1  -0.14   -0.05 1.16 -1.53 2.23  3.76  0.41    -0.74\nCOMPUTER_PR    5 55    0  1  -0.39   -0.17 0.60 -1.08 3.11  4.19  1.48     1.45\n              se\nRADIO_PR    0.13\nTV_PR       0.13\nLLPHONE_PR  0.13\nMPHONE_PR   0.13\nCOMPUTER_PR 0.13"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-standardised-clustering-variables",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-standardised-clustering-variables",
    "title": "In class exercise 05",
    "section": "Visualising the standardised clustering variables",
    "text": "Visualising the standardised clustering variables\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)\n\n\n\nr &lt;- ggplot(data=ict_derived, \n             aes(x= `RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Raw values without standardisation\")\n\nshan_ict_s_df &lt;- as.data.frame(shan_ict.std)\ns &lt;- ggplot(data=shan_ict_s_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Min-Max Standardisation\")\n\nshan_ict_z_df &lt;- as.data.frame(shan_ict.z)\nz &lt;- ggplot(data=shan_ict_z_df, \n       aes(x=`RADIO_PR`)) +\n  geom_density(color=\"black\",\n               fill=\"light blue\") +\n  ggtitle(\"Z-score Standardisation\")\n\nggarrange(r, s, z,\n          ncol = 3,\n          nrow = 1)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-proximity-matrix",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-proximity-matrix",
    "title": "In class exercise 05",
    "section": "Computing proximity matrix",
    "text": "Computing proximity matrix\n\nproxmat &lt;- dist(shan_ict, method = 'euclidean')\nproxmat\n\n            Monghsat   Mongton Monghpyak Mongyawng Tachileik    Hopang\nMongton     87.32579                                                  \nMonghpyak  362.10528 381.94595                                        \nMongyawng  462.39528 514.25999 364.75550                              \nTachileik  638.61472 679.87886 375.28930 269.97072                    \nHopang     314.10389 358.68971 295.56003 160.77683 374.39286          \nMongmao    271.44833 310.39044 291.88846 211.59825 417.22239  53.35800\nMongyai     89.10950  60.39420 370.01575 530.40201 684.78531 380.37668\nTangyan    128.49274 162.36211 335.26416 515.31103 653.51026 381.69500\nMatman     274.74139 210.60943 470.46845 698.96728 822.77398 547.83048\nNarphan    257.37923 193.51487 448.40651 536.54193 701.78491 383.07691\nPangsang   272.12465 304.77907 314.58751 236.18696 434.59174  89.74259\nMabein     488.47926 536.42921 212.69450 351.64121 305.02379 362.22629\nMongmit    227.87694 279.12149 177.76325 356.42193 462.91568 256.14697\nKutkai     113.11275 157.65813 263.89557 413.09466 560.66702 273.02796\nMuse       653.74609 705.85363 510.43738 197.72718 236.99453 350.13465\nNamhkan    484.31259 530.62017 379.50202  49.08048 261.31786 174.46525\nManton     277.56771 204.07632 502.20840 707.46853 843.88428 552.50514\nNamhsan    140.20791 135.88295 352.70492 552.71402 686.96140 411.18184\nKengtung   408.65190 456.53321 221.47613 156.02315 233.25243 170.76483\nMongkhet   133.89052  82.48387 462.63265 579.03590 757.31347 423.87888\nMongla     461.41575 514.62849 408.03397  76.50064 314.87697 167.68273\nMongping   115.45167  37.61954 377.16006 535.53761 689.48482 380.90803\nMongyang   374.94974 413.63042 365.74200 148.02231 381.03911  89.98098\nPangwaun   352.39334 350.15010 381.95144 325.12718 492.47638 216.84220\nKonkyan    342.34819 340.17739 432.68465 349.20182 547.48363 228.73735\nLaukkaing  649.37363 700.71587 558.69094 206.07033 330.17549 346.47861\nHsipaw     133.53141 179.72998 237.67919 360.47481 511.34388 221.17708\nKyaukme    186.59845 244.25564 217.17015 311.77629 459.11742 190.27092\nNamtu      247.36449 318.45399 346.57799 468.29162 597.54587 377.74665\nNawnghkio  300.28906 337.26687  93.03711 342.88110 401.95578 263.04701\nHseni      356.42632 408.38819 200.26876 183.57644 291.73405 158.49756\nKunlong    231.38139 299.10650 357.44661 343.55773 538.46760 234.73524\nLashio     406.90251 463.97765 262.09281 143.01206 255.17822 172.47624\nPindaya    309.02619 331.66232 221.30579 516.45677 567.62821 420.06332\nYwangan    405.26563 367.21736 367.44835 698.81411 739.58954 576.06407\nLangkho    276.51171 326.65950 165.77276 256.50924 373.79491 166.72209\nMawkmai    238.61555 178.13949 536.71695 690.07088 854.83291 534.55897\nMongnai    162.69061 239.58987 288.87857 371.72173 527.13016 259.96584\nMongpan    301.37972 335.04236 187.85699 230.86720 348.38295 133.29507\nKunhing    129.46959 175.37710 258.63906 346.96114 511.47207 199.80945\nKyethi     153.98936 156.75412 372.03823 569.82836 704.83101 430.50903\nLaihka     192.85151 269.52016 293.22640 309.40362 489.01651 198.41192\nLoilen     173.71333 249.68615 302.28908 313.38188 497.94667 195.60520\nMonghsu    133.87323 166.45311 239.27552 423.87061 552.47452 290.45898\nMongkaing  336.68331 257.61136 568.21089 760.33086 901.95285 602.82146\nNansang    235.53237 297.07583 225.08565 258.77830 413.30593 155.25985\nHopong      98.40000 143.13349 267.95563 420.49885 566.76729 280.74487\nHsihseng   153.33504 204.65713 285.37627 462.22268 592.66862 339.67918\nPinlaung   136.52121 204.26859 262.42529 366.91538 522.72379 240.98209\nKalaw      340.62397 390.34169 167.08436 220.09066 308.22714 177.01476\nLawksawk   339.45249 384.81813 142.90719 376.06087 415.11328 317.04554\nNyaungshwe 299.96016 339.52292 103.97300 309.74870 377.84336 233.40077\nPekon      231.48116 275.18351 190.93173 413.68017 505.98054 310.51888\nTaunggyi   519.87617 569.67168 278.54662 214.15450 146.50800 286.26189\n             Mongmao   Mongyai   Tangyan    Matman   Narphan  Pangsang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai    335.61300                                                  \nTangyan    347.14183 109.08506                                        \nMatman     501.59903 186.95158 242.78233                              \nNarphan    331.42618 248.82845 348.84991 312.05193                    \nPangsang    59.01186 335.99028 358.81338 498.75916 308.84211          \nMabein     384.91867 516.40426 448.59948 637.53975 630.34312 421.06108\nMongmit    242.54541 256.72744 195.92520 401.25041 406.15714 270.25688\nKutkai     238.40977 141.46377 117.33776 303.62543 304.40219 255.05699\nMuse       401.73628 722.01487 701.90550 887.64395 716.53108 416.55633\nNamhkan    223.32205 550.62819 542.64078 715.42102 536.85519 239.34907\nManton     503.79786 195.59882 271.82672  59.52318 280.26395 496.92528\nNamhsan    371.71448  77.35900  63.67613 180.09747 316.54695 379.01776\nKengtung   207.58055 460.39706 429.95076 613.01033 505.40025 234.87547\nMongkhet   375.35820 104.98924 201.49393 203.02855 217.28718 367.76745\nMongla     216.24705 535.28615 526.80849 708.17595 531.46949 225.65479\nMongping   332.77136  55.57971 161.14845 178.17375 197.14179 327.55706\nMongyang   114.13509 443.03240 456.42130 608.88811 405.30587 118.54818\nPangwaun   187.40057 394.07696 447.05580 523.43600 264.64997 155.95189\nKonkyan    195.87845 390.44168 450.22768 523.38303 248.59111 168.80092\nLaukkaing  394.24006 723.01918 713.33507 894.07117 698.76465 405.86736\nHsipaw     185.99483 177.33790 167.69794 344.45451 295.40170 199.78108\nKyaukme    169.72286 238.53548 207.10882 405.52815 354.04152 191.93027\nNamtu      365.03882 278.02761 178.69483 416.65397 494.36143 389.98478\nNawnghkio  257.76465 319.57938 269.07880 444.05061 435.59661 286.07280\nHseni      184.67099 408.23212 373.07575 564.64051 474.12297 218.17517\nKunlong    224.43391 299.36066 268.07983 468.27436 413.07823 256.57002\nLashio     214.23677 466.36472 429.84475 628.11049 525.63854 241.98353\nPindaya    402.21719 287.41816 208.43740 354.39039 474.50209 424.79827\nYwangan    542.85957 333.12853 324.77002 255.22031 452.95769 551.34140\nLangkho    169.13802 322.41585 285.18102 476.27664 412.74676 202.43889\nMawkmai    485.52853 178.70499 262.66006 147.83545 273.75350 476.20208\nMongnai    240.35551 220.69507 166.11066 393.46500 386.90874 256.67562\nMongpan    131.59966 346.39710 340.39128 494.81014 371.13393 141.38256\nKunhing    160.61674 184.76601 190.85485 356.41606 275.80822 169.12812\nKyethi     392.38820  97.41958  62.22756 185.80309 341.43824 400.62332\nLaihka     185.99082 264.13364 224.29176 443.25453 392.32592 212.02223\nLoilen     176.36918 249.00699 222.61711 431.68707 366.05795 192.34739\nMonghsu    256.25235 143.02351 116.01252 292.71321 308.67754 267.87135\nMongkaing  552.31959 262.84016 348.56123 135.51424 285.65085 540.41518\nNansang    150.47500 295.11243 261.79748 464.52409 392.91407 177.31962\nHopong     244.16253 124.62791 106.82328 291.84351 294.40441 255.63450\nHsihseng   311.98001 162.27126  70.27241 304.02806 377.52977 330.67066\nPinlaung   213.65062 189.92741 150.77968 363.35847 343.68939 231.96446\nKalaw      195.18913 386.74701 348.06617 537.63884 463.53759 226.43153\nLawksawk   317.89520 357.68399 286.14291 477.26290 502.91489 348.21248\nNyaungshwe 230.45003 327.13541 284.14692 460.91883 427.94086 257.29285\nPekon      293.70625 242.52301 167.79937 368.25761 416.84901 318.66692\nTaunggyi   327.62349 567.95835 524.85932 712.79060 623.29552 353.54222\n              Mabein   Mongmit    Kutkai      Muse   Namhkan    Manton\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit    263.37099                                                  \nKutkai     387.54283 133.12225                                        \nMuse       446.52643 532.02740 600.71732                              \nNamhkan    379.56035 386.02794 437.49677 182.51378                    \nManton     674.01120 430.64070 323.27300 897.38994 721.86149          \nNamhsan    488.33873 237.78494 144.42560 741.14051 576.42717 210.48485\nKengtung   219.47071 246.45691 333.59507 297.85358 175.63015 631.99123\nMongkhet   610.30557 349.45980 225.62114 770.90886 596.19944 181.33894\nMongla     406.09124 384.30076 426.19238 205.75455  77.21355 712.51416\nMongping   539.39172 284.54764 168.39807 726.72676 551.34840 175.18629\nMongyang   428.41451 339.44253 350.98437 320.20559 143.58305 607.25492\nPangwaun   523.44632 381.51246 352.19919 482.63856 310.44067 510.79265\nKonkyan    565.68157 407.54071 353.80850 506.90034 337.79773 505.01384\nLaukkaing  516.22570 560.14065 610.87736 105.06092 187.83160 897.53157\nHsipaw     366.42787 118.18050  72.68052 550.32352 382.79302 359.60008\nKyaukme    313.96040  85.99053 117.60935 497.74995 338.37237 423.80902\nNamtu      366.16094 179.62251 202.90404 635.72194 506.32466 448.58230\nNawnghkio  204.63154  89.07103 200.20162 504.68383 367.33575 475.77296\nHseni      213.61240 189.37188 281.40391 347.84917 212.11323 584.63341\nKunlong    396.61508 224.12169 191.36021 515.21522 375.73885 479.76855\nLashio     231.28227 251.29457 337.60966 284.61061 173.27153 646.66493\nPindaya    313.45776 171.86828 222.40619 679.37042 543.81859 402.42888\nYwangan    529.14689 381.88259 357.85324 866.88131 714.43173 306.16379\nLangkho    236.10993 108.24559 189.70787 430.40156 283.14766 498.15236\nMawkmai    693.24602 434.92968 316.93710 881.84770 706.47792 109.08779\nMongnai    357.68863 120.50905 127.50639 553.45356 403.21778 413.10620\nMongpan    301.52942 193.32063 241.47753 404.18633 240.34131 507.96808\nKunhing    386.97636 149.16013  92.29559 537.57242 366.90509 365.95670\nKyethi     498.28468 250.21546 161.57122 757.43846 595.08589 218.17539\nLaihka     345.00222 141.87227 148.87558 492.00220 342.43665 458.30232\nLoilen     371.00175 156.43524 152.94961 499.67865 343.10491 442.98125\nMonghsu    377.48799 120.09317  69.28180 610.75604 446.93550 316.37651\nMongkaing  747.17454 503.61965 391.98466 949.14300 771.39688  81.75337\nNansang    289.85032 116.35560 173.14686 442.01722 287.95784 481.69039\nHopong     398.00917 136.93111  40.38212 609.68462 444.13246 310.58885\nHsihseng   381.20187 131.49728  94.54603 645.17272 492.09476 334.87758\nPinlaung   358.28540 104.03336  83.89163 554.83482 395.34930 381.68336\nKalaw      198.14085 160.05997 259.21417 381.00095 246.39577 560.16577\nLawksawk   167.99283 114.14087 241.04961 525.41184 405.86018 514.50822\nNyaungshwe 210.21337  99.38590 208.75736 474.31957 333.32428 488.79874\nPekon      282.26877  59.61977 133.75207 585.89664 442.77120 403.82131\nTaunggyi   187.99481 332.61973 436.91804 269.73932 228.97512 737.06628\n             Namhsan  Kengtung  Mongkhet    Mongla  Mongping  Mongyang\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung   466.20497                                                  \nMongkhet   170.90848 531.35998                                        \nMongla     564.02740 202.45004 574.40292                              \nMongping   122.16611 469.50830  94.84160 538.96857                    \nMongyang   482.65563 219.40886 473.30592 136.68403 437.26233          \nPangwaun   448.58030 337.48335 407.02947 319.18643 365.63276 191.10392\nKonkyan    451.02486 379.98992 385.39613 333.56921 361.86883 205.37261\nLaukkaing  751.16412 344.43729 759.05639 192.80169 725.08441 296.80806\nHsipaw     194.47928 284.08582 253.80950 373.47509 192.76670 294.87828\nKyaukme    245.94251 229.32546 314.88944 328.19810 258.56587 269.87548\nNamtu      240.95555 385.33554 355.99713 483.49434 328.36321 457.27053\nNawnghkio  299.74967 208.29647 414.10280 381.40808 337.72547 342.72165\nHseni      411.96125  66.12817 481.88406 226.82048 421.40833 222.01323\nKunlong    310.40560 317.14187 341.68641 346.46200 325.54864 308.22437\nLashio     472.04024  59.85893 534.44463 179.95877 480.25872 221.57495\nPindaya    228.41073 385.68322 391.74783 549.42389 318.87685 503.10258\nYwangan    286.16305 573.23173 408.97731 728.16301 334.09578 647.56567\nLangkho    322.20877 147.23382 401.07653 286.88557 338.25134 251.28012\nMawkmai    215.19289 632.54638 115.58388 686.88950 166.76681 584.17675\nMongnai    220.02244 300.12117 293.92538 379.77426 256.40953 333.74142\nMongpan    364.77086 142.21554 412.17123 253.20001 346.07179 191.90882\nKunhing    214.26149 283.57071 247.92480 354.14778 193.73659 269.76623\nKyethi      30.06411 483.42731 180.74147 580.55403 145.42186 503.06243\nLaihka     273.79672 258.23950 324.97428 315.93218 292.32905 275.21499\nLoilen     268.25760 267.90938 304.92548 315.02436 273.38974 263.38393\nMonghsu    138.42898 331.88955 238.78727 440.14716 167.46925 364.45948\nMongkaing  288.66231 692.74693 222.60577 761.48327 233.29492 650.17577\nNansang    303.97035 182.00626 365.55256 275.71877 313.93202 234.77630\nHopong     132.70541 340.47382 212.99485 432.31105 152.09735 354.34645\nHsihseng   125.74240 370.72441 256.70338 478.66210 207.84807 419.29186\nPinlaung   195.39524 292.89765 267.27554 379.03826 219.74570 316.46682\nKalaw      385.88676  88.29335 465.52013 260.26411 400.93389 247.39995\nLawksawk   325.00859 238.97908 456.16573 416.33728 384.77487 397.08485\nNyaungshwe 315.91750 177.75714 417.08639 347.60273 342.58466 308.96170\nPekon      207.16559 297.67761 342.08722 441.20998 274.90914 394.97871\nTaunggyi   563.98820 122.47380 645.12312 263.71210 580.46758 322.46154\n            Pangwaun   Konkyan Laukkaing    Hsipaw   Kyaukme     Namtu\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan    102.80753                                                  \nLaukkaing  461.12611 472.61646                                        \nHsipaw     298.12447 313.90108 559.80075                              \nKyaukme    312.07571 333.07386 513.07862  67.20381                    \nNamtu      517.03554 522.32585 656.23693 229.44658 212.93706          \nNawnghkio  381.67478 421.36219 545.11507 176.09570 143.54182 257.52713\nHseni      330.70182 370.95598 384.34196 231.48538 173.32741 327.41448\nKunlong    392.45403 362.61239 513.05751 205.10051 189.33132 233.60474\nLashio     362.45608 395.56910 327.55795 290.86435 230.02200 365.88437\nPindaya    512.13162 541.99828 719.22426 245.98884 248.38597 225.40822\nYwangan    580.13146 609.06415 900.45648 388.63147 427.35840 444.66868\nLangkho    324.02881 351.92961 459.51993 150.34960  95.94481 260.73989\nMawkmai    500.68857 482.94204 872.49402 351.34601 413.75699 427.95451\nMongnai    380.67176 392.44883 565.04063 112.75841  93.66557 142.61162\nMongpan    232.52209 284.54237 426.81364 179.52054 148.78685 352.91394\nKunhing    270.70218 280.72430 541.78090  38.07574  81.12510 253.40768\nKyethi     475.04332 475.33718 767.70579 214.65675 261.99309 231.64300\nLaihka     351.78203 352.25762 498.51776 128.42987  90.63188 185.86794\nLoilen     324.71214 331.47708 501.89698 115.14347  87.47090 208.06627\nMonghsu    352.24428 372.13793 625.82332  71.80622 117.44411 211.64630\nMongkaing  536.95736 526.13978 944.08937 423.77868 489.54929 525.04057\nNansang    310.82119 334.17982 459.11645 123.20702  59.43736 235.60555\nHopong     346.00673 354.94758 619.21736  62.86179 116.78061 206.82668\nHsihseng   433.06326 441.90159 662.03482 136.54610 156.86671 131.89940\nPinlaung   345.26365 357.30894 564.98014  61.78918  65.64998 174.06066\nKalaw      338.35194 379.66251 420.32245 212.36711 155.11575 307.27427\nLawksawk   453.62847 491.98551 572.92336 227.66309 187.91927 233.00429\nNyaungshwe 352.92324 397.78267 512.62256 169.92664 129.96709 271.41464\nPekon      423.81347 447.24435 616.73068 145.37542 134.76631 165.02707\nTaunggyi   448.31014 493.10912 347.89274 394.23082 335.96078 455.04857\n           Nawnghkio     Hseni   Kunlong    Lashio   Pindaya   Ywangan\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni      164.05304                                                  \nKunlong    285.04608 276.19175                                        \nLashio     230.55346  79.41836 295.23103                              \nPindaya    180.64047 337.98982 355.47066 398.98167                    \nYwangan    377.87702 534.44679 531.63089 602.17475 257.31610          \nLangkho    104.78267  97.45017 214.41934 156.51414 264.43578 456.34792\nMawkmai    495.15047 582.53670 446.53763 638.60773 437.99577 397.03752\nMongnai    204.02240 241.43127 187.83626 286.62417 250.84663 442.75313\nMongpan    172.84425 120.66550 288.03320 172.33279 335.72896 483.68125\nKunhing    202.18478 235.08798 196.89906 288.89804 282.10475 415.01241\nKyethi     315.51870 428.21511 315.88157 486.58891 232.72433 295.70874\nLaihka     211.88187 204.49010 122.68682 238.64533 298.61288 491.83321\nLoilen     225.15357 213.65710 163.62927 251.60098 312.34627 492.56623\nMonghsu    179.65161 277.64188 248.94905 341.17478 193.59809 327.70420\nMongkaing  546.69447 648.04408 539.91284 708.65819 481.71125 364.98429\nNansang    154.03190 126.21270 190.66116 174.92229 286.73452 478.88910\nHopong     204.88286 286.41193 219.06817 345.31042 223.06050 352.85844\nHsihseng   209.88026 312.74375 231.85967 369.00833 172.00796 342.91035\nPinlaung   184.10044 234.54660 184.53436 288.86569 238.46615 411.42371\nKalaw      127.74787  38.52842 273.01375 106.69059 302.51785 499.53297\nLawksawk    77.88441 194.96461 308.76472 249.75728 163.70872 396.94723\nNyaungshwe  43.26545 130.86310 285.13095 201.58191 216.52463 407.11649\nPekon      113.15370 243.98001 249.36301 303.80011 117.91580 336.50410\nTaunggyi   280.87632 171.29980 409.09831 133.16939 444.05392 641.79042\n             Langkho   Mawkmai   Mongnai   Mongpan   Kunhing    Kyethi\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai    498.64958                                                  \nMongnai    173.65142 388.12494                                        \nMongpan    115.48649 509.99632 234.52274                              \nKunhing    159.43678 351.34217 128.12589 173.67242                    \nKyethi     338.38651 217.66666 226.81816 386.71906 234.83042          \nLaihka     143.54754 429.96554  83.62440 210.76951 127.70336 282.70667\nLoilen     160.24114 410.93612  77.04674 200.12296 108.97900 279.32937\nMonghsu    192.77738 319.73738 129.24415 230.15338 104.41585 159.01898\nMongkaing  563.84387 133.29995 481.95569 563.56780 425.31067 296.70986\nNansang     73.29679 467.99952 122.49533 128.65600 125.87558 318.66399\nHopong     199.66017 302.84362 119.00944 239.43845  86.61639 151.94762\nHsihseng   226.34349 329.29477 118.91552 295.87811 166.43309 128.90460\nPinlaung   156.90140 363.96544  54.60240 210.54496  83.27702 208.18855\nKalaw       73.44594 562.59200 225.24482 114.69105 220.36370 402.10399\nLawksawk   152.76672 532.31929 219.53401 235.98437 257.02377 334.67380\nNyaungshwe  85.20306 502.99026 198.76081 137.29734 191.58035 333.03416\nPekon      160.92801 416.00669 145.34545 243.30037 180.02796 216.53549\nTaunggyi   247.98915 743.10823 396.21292 257.44541 398.20104 578.88199\n              Laihka    Loilen   Monghsu Mongkaing   Nansang    Hopong\nMongton                                                               \nMonghpyak                                                             \nMongyawng                                                             \nTachileik                                                             \nHopang                                                                \nMongmao                                                               \nMongyai                                                               \nTangyan                                                               \nMatman                                                                \nNarphan                                                               \nPangsang                                                              \nMabein                                                                \nMongmit                                                               \nKutkai                                                                \nMuse                                                                  \nNamhkan                                                               \nManton                                                                \nNamhsan                                                               \nKengtung                                                              \nMongkhet                                                              \nMongla                                                                \nMongping                                                              \nMongyang                                                              \nPangwaun                                                              \nKonkyan                                                               \nLaukkaing                                                             \nHsipaw                                                                \nKyaukme                                                               \nNamtu                                                                 \nNawnghkio                                                             \nHseni                                                                 \nKunlong                                                               \nLashio                                                                \nPindaya                                                               \nYwangan                                                               \nLangkho                                                               \nMawkmai                                                               \nMongnai                                                               \nMongpan                                                               \nKunhing                                                               \nKyethi                                                                \nLaihka                                                                \nLoilen      53.02308                                                  \nMonghsu    176.20963 166.55716                                        \nMongkaing  522.96309 504.80047 387.20959                              \nNansang     89.88065  92.42196 176.26037 545.84005                    \nHopong     157.48857 148.86809  41.96640 379.37916 175.15551          \nHsihseng   175.89761 182.89909  93.10795 411.59788 207.50475  91.65458\nPinlaung    92.12997  83.78259  88.09751 449.68803 115.23757  75.20502\nKalaw      197.34633 207.90690 252.04573 625.24500 116.26808 264.16294\nLawksawk   235.87581 255.22680 220.34277 589.81481 191.80909 245.54972\nNyaungshwe 201.71653 208.54778 185.71154 557.32112 130.12972 209.32532\nPekon      182.23667 198.49756 117.37028 480.23965 172.83377 138.86577\nTaunggyi   358.53960 374.46978 433.08465 800.80051 289.05636 445.50991\n            Hsihseng  Pinlaung     Kalaw  Lawksawk Nyaungshwe     Pekon\nMongton                                                                \nMonghpyak                                                              \nMongyawng                                                              \nTachileik                                                              \nHopang                                                                 \nMongmao                                                                \nMongyai                                                                \nTangyan                                                                \nMatman                                                                 \nNarphan                                                                \nPangsang                                                               \nMabein                                                                 \nMongmit                                                                \nKutkai                                                                 \nMuse                                                                   \nNamhkan                                                                \nManton                                                                 \nNamhsan                                                                \nKengtung                                                               \nMongkhet                                                               \nMongla                                                                 \nMongping                                                               \nMongyang                                                               \nPangwaun                                                               \nKonkyan                                                                \nLaukkaing                                                              \nHsipaw                                                                 \nKyaukme                                                                \nNamtu                                                                  \nNawnghkio                                                              \nHseni                                                                  \nKunlong                                                                \nLashio                                                                 \nPindaya                                                                \nYwangan                                                                \nLangkho                                                                \nMawkmai                                                                \nMongnai                                                                \nMongpan                                                                \nKunhing                                                                \nKyethi                                                                 \nLaihka                                                                 \nLoilen                                                                 \nMonghsu                                                                \nMongkaing                                                              \nNansang                                                                \nHopong                                                                 \nHsihseng                                                               \nPinlaung   106.91720                                                   \nKalaw      287.11074 216.61424                                         \nLawksawk   221.35520 216.08896 161.25991                               \nNyaungshwe 225.80242 179.95677  95.66782 102.65673                     \nPekon      105.30573 130.86698 211.91531 120.47648  139.31874          \nTaunggyi   460.70938 396.47491 184.24437 285.77859  259.78442 375.13085\n\n\nComputing hierarchical clustering\n\nhclust_ward &lt;- hclust(proxmat, method = 'ward.D')\nplot(hclust_ward, cex = 0.6)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#selecting-the-optimal-clustering-algorithm",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#selecting-the-optimal-clustering-algorithm",
    "title": "In class exercise 05",
    "section": "Selecting the optimal clustering algorithm",
    "text": "Selecting the optimal clustering algorithm\n\nm &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\nnames(m) &lt;- c( \"average\", \"single\", \"complete\", \"ward\")\n\nac &lt;- function(x) {\n  agnes(shan_ict, method = x)$ac\n}\n\nmap_dbl(m, ac)\n\n  average    single  complete      ward \n0.8365556 0.7006561 0.8983065 0.9488899"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#determining-optimal-clusters",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#determining-optimal-clusters",
    "title": "In class exercise 05",
    "section": "Determining Optimal Clusters",
    "text": "Determining Optimal Clusters\n\nGap Statistic Method\n\nset.seed(12345)\ngap_stat &lt;- clusGap(shan_ict, \n                    FUN = hcut, \n                    nstart = 25, \n                    K.max = 10, \n                    B = 50)\n# Print the result\nprint(gap_stat, method = \"firstmax\")\n\nClustering Gap statistic [\"clusGap\"] from call:\nclusGap(x = shan_ict, FUNcluster = hcut, K.max = 10, B = 50, nstart = 25)\nB=50 simulated reference sets, k = 1..10; spaceH0=\"scaledPCA\"\n --&gt; Number of clusters (method 'firstmax'): 1\n          logW   E.logW       gap     SE.sim\n [1,] 8.401924 8.672479 0.2705551 0.04333897\n [2,] 8.107732 8.367009 0.2592767 0.03924690\n [3,] 7.965003 8.219640 0.2546364 0.03367975\n [4,] 7.829605 8.093406 0.2638009 0.03782676\n [5,] 7.695818 7.992070 0.2962516 0.03681358\n [6,] 7.616339 7.898464 0.2821247 0.03975286\n [7,] 7.551722 7.816837 0.2651150 0.04068218\n [8,] 7.489050 7.742131 0.2530806 0.04244978\n [9,] 7.403910 7.672548 0.2686377 0.04533739\n[10,] 7.323138 7.607562 0.2844236 0.04679361\n\nfviz_gap_stat(gap_stat)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interpreting-the-dendrograms",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#interpreting-the-dendrograms",
    "title": "In class exercise 05",
    "section": "Interpreting the dendrograms",
    "text": "Interpreting the dendrograms\n\nplot(hclust_ward, cex = 0.6)\nrect.hclust(hclust_ward, \n            k = 5, \n            border = 2:5)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visually-driven-hierarchical-clustering-analysis",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visually-driven-hierarchical-clustering-analysis",
    "title": "In class exercise 05",
    "section": "Visually-driven hierarchical clustering analysis",
    "text": "Visually-driven hierarchical clustering analysis\n\nshan_ict_mat &lt;- data.matrix(shan_ict)\nheatmaply(normalize(shan_ict_mat),\n          Colv=NA,\n          dist_method = \"euclidean\",\n          hclust_method = \"ward.D\",\n          seriate = \"OLO\",\n          colors = Blues,\n          k_row = 6,\n          margins = c(NA,200,60,NA),\n          fontsize_row = 4,\n          fontsize_col = 5,\n          main=\"Geographic Segmentation of Shan State by ICT indicators\",\n          xlab = \"ICT Indicators\",\n          ylab = \"Townships of Shan State\"\n          )"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-clusters-formed",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#mapping-the-clusters-formed",
    "title": "In class exercise 05",
    "section": "Mapping the clusters formed",
    "text": "Mapping the clusters formed\n\ngroups &lt;- as.factor(cutree(hclust_ward, k=5))\n\nshan_sf_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER`=`as.matrix.groups.`)\n\nqtm(shan_sf_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-minimum-spanning-tree",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-minimum-spanning-tree",
    "title": "In class exercise 05",
    "section": "Computing minimum spanning tree",
    "text": "Computing minimum spanning tree\n\nshan_sp &lt;- as_Spatial(shan_sf)\nshan.nb &lt;- poly2nb(shan_sp)\nsummary(shan.nb)\n\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\ncoords &lt;- st_coordinates(\n  st_centroid(st_geometry(shan_sf)))\nplot(st_geometry(shan_sf), \n     border=grey(.5))\nplot(shan.nb,\n     coords, \n     col=\"blue\", \n     add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-spatially-constrained-clusters-using-skater-method",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#computing-spatially-constrained-clusters-using-skater-method",
    "title": "In class exercise 05",
    "section": "Computing spatially constrained clusters using SKATER method",
    "text": "Computing spatially constrained clusters using SKATER method\n\nlcosts &lt;- nbcosts(shan.nb, shan_ict)\nshan.w &lt;- nb2listw(shan.nb, \n                   lcosts, \n                   style=\"B\")\nsummary(shan.w)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 55 \nNumber of nonzero links: 264 \nPercentage nonzero weights: 8.727273 \nAverage number of links: 4.8 \nLink number distribution:\n\n 2  3  4  5  6  7  8  9 \n 5  8  9 19  5  4  4  1 \n5 least connected regions:\n13 25 31 36 54 with 2 links\n1 most connected region:\n52 with 9 links\n\nWeights style: B \nWeights constants summary:\n   n   nn       S0       S1        S2\nB 55 3025 74067.64 54827108 495369982\n\nshan.mst &lt;- mstree(shan.w)\nclass(shan.mst)\n\n[1] \"mst\"    \"matrix\"\n\ndim(shan.mst)\n\n[1] 54  3\n\nhead(shan.mst)\n\n     [,1] [,2]      [,3]\n[1,]   54   50 130.86698\n[2,]   54   53 139.31874\n[3,]   53   51  95.66782\n[4,]   51   52 161.25991\n[5,]   52   31  77.88441\n[6,]   31   29 143.54182\n\nplot(st_geometry(shan_sf), \n                 border=gray(.5))\nplot.mst(shan.mst, \n         coords, \n         col=\"blue\", \n         cex.lab=0.7, \n         cex.circles=0.005, \n         add=TRUE)\n\n\n\n\n\nclust5 &lt;- spdep::skater(edges = shan.mst[,1:2], \n                 data = shan_ict, \n                 method = \"euclidean\", \n                 ncuts = 4)\n\nstr(clust5)\n\nList of 8\n $ groups      : num [1:55] 3 3 2 2 2 2 2 3 3 3 ...\n $ edges.groups:List of 5\n  ..$ :List of 3\n  .. ..$ node: num [1:12] 29 31 52 51 35 14 53 54 55 36 ...\n  .. ..$ edge: num [1:11, 1:3] 35 52 51 14 54 54 53 51 29 31 ...\n  .. ..$ ssw : num 1790\n  ..$ :List of 3\n  .. ..$ node: num [1:18] 25 7 4 22 6 17 24 15 20 12 ...\n  .. ..$ edge: num [1:17, 1:3] 4 6 17 20 15 22 15 7 24 4 ...\n  .. ..$ ssw : num 3475\n  ..$ :List of 3\n  .. ..$ node: num [1:14] 45 42 9 19 8 23 28 2 46 18 ...\n  .. ..$ edge: num [1:13, 1:3] 42 28 19 23 45 9 23 2 23 8 ...\n  .. ..$ ssw : num 1850\n  ..$ :List of 3\n  .. ..$ node: num [1:10] 41 39 47 37 49 48 43 44 40 38\n  .. ..$ edge: num [1:9, 1:3] 49 44 48 39 43 37 47 47 41 38 ...\n  .. ..$ ssw : num 1316\n  ..$ :List of 3\n  .. ..$ node: num 11\n  .. ..$ edge: num[0 , 1:3] \n  .. ..$ ssw : num 0\n $ not.prune   : NULL\n $ candidates  : int [1:5] 1 2 3 4 5\n $ ssto        : num 12665\n $ ssw         : num [1:5] 12665 10593 9581 8855 8431\n $ crit        : num [1:2] 1 Inf\n $ vec.crit    : num [1:55] 1 1 1 1 1 1 1 1 1 1 ...\n - attr(*, \"class\")= chr \"skater\"\n\nccs5 &lt;- clust5$groups\nccs5\n\n [1] 3 3 2 2 2 2 2 3 3 3 5 2 1 1 2 2 2 3 3 2 3 2 3 2 2 2 2 3 1 3 1 2 2 2 1 1 4 4\n[39] 4 4 4 3 4 4 3 3 4 4 4 1 1 1 1 1 1\n\ntable(ccs5)\n\nccs5\n 1  2  3  4  5 \n12 18 14 10  1 \n\nplot(st_geometry(shan_sf), \n     border=gray(.5))\nplot(clust5, \n     coords, \n     cex.lab=.7,\n     groups.colors=c(\"red\",\"green\",\"blue\", \"brown\", \"pink\"),\n     cex.circles=0.005, \n     add=TRUE)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-clusters-in-choropleth-map",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-the-clusters-in-choropleth-map",
    "title": "In class exercise 05",
    "section": "Visualising the clusters in choropleth map",
    "text": "Visualising the clusters in choropleth map\n\ngroups_mat &lt;- as.matrix(clust5$groups)\nshan_sf_spatialcluster &lt;- cbind(shan_sf_cluster, as.factor(groups_mat)) %&gt;%\n  rename(`SP_CLUSTER`=`as.factor.groups_mat.`)\nqtm(shan_sf_spatialcluster, \"SP_CLUSTER\")\n\n\n\nhclust.map &lt;- qtm(shan_sf_cluster,\n                  \"CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\nshclust.map &lt;- qtm(shan_sf_spatialcluster,\n                   \"SP_CLUSTER\") + \n  tm_borders(alpha = 0.5) \n\ntmap_arrange(hclust.map, shclust.map,\n             asp=NA, ncol=2)"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#ward-like-hierarchical-clustering-clustgeo",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#ward-like-hierarchical-clustering-clustgeo",
    "title": "In class exercise 05",
    "section": "Ward-like hierarchical clustering: ClustGeo",
    "text": "Ward-like hierarchical clustering: ClustGeo\n\nnongeo_cluster &lt;- hclustgeo(proxmat)\nplot(nongeo_cluster, cex = 0.5)\nrect.hclust(nongeo_cluster, \n            k = 5, \n            border = 2:5)\n\n\n\n\n\ngroups &lt;- as.factor(cutree(nongeo_cluster, k=6))\nshan_sf_ngeo_cluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\nqtm(shan_sf_ngeo_cluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-hierarchical-clustering",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#spatially-constrained-hierarchical-clustering",
    "title": "In class exercise 05",
    "section": "Spatially Constrained Hierarchical Clustering",
    "text": "Spatially Constrained Hierarchical Clustering\n\ndist &lt;- st_distance(shan_sf, shan_sf)\ndistmat &lt;- as.dist(dist)\n\ncr &lt;- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=5, graph = TRUE)\n\n\n\n\n\n\nclustG &lt;- hclustgeo(proxmat, distmat, alpha = 0.3)\ngroups &lt;- as.factor(cutree(clustG, k=6))\nshan_sf_Gcluster &lt;- cbind(shan_sf, as.matrix(groups)) %&gt;%\n  rename(`CLUSTER` = `as.matrix.groups.`)\nqtm(shan_sf_Gcluster, \"CLUSTER\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-individual-clustering-variable",
    "href": "Hands-on_Ex/Hands-on_Ex06/Hands-on_Ex06.html#visualising-individual-clustering-variable",
    "title": "In class exercise 05",
    "section": "Visualising individual clustering variable",
    "text": "Visualising individual clustering variable\n\nggplot(data = shan_sf_ngeo_cluster,\n       aes(x = CLUSTER, y = RADIO_PR)) +\n  geom_boxplot()\n\n\n\n\n\nggparcoord(data = shan_sf_ngeo_cluster, \n           columns = c(17:21), \n           scale = \"globalminmax\",\n           alphaLines = 0.2,\n           boxplot = TRUE, \n           title = \"Multiple Parallel Coordinates Plots of ICT Variables by Cluster\") +\n  facet_grid(~ CLUSTER) + \n  theme(axis.text.x = element_text(angle = 30))\n\n\n\nshan_sf_ngeo_cluster %&gt;% \n  st_set_geometry(NULL) %&gt;%\n  group_by(CLUSTER) %&gt;%\n  summarise(mean_RADIO_PR = mean(RADIO_PR),\n            mean_TV_PR = mean(TV_PR),\n            mean_LLPHONE_PR = mean(LLPHONE_PR),\n            mean_MPHONE_PR = mean(MPHONE_PR),\n            mean_COMPUTER_PR = mean(COMPUTER_PR))\n\n# A tibble: 6 × 6\n  CLUSTER mean_RADIO_PR mean_TV_PR mean_LLPHONE_PR mean_MPHONE_PR\n  &lt;chr&gt;           &lt;dbl&gt;      &lt;dbl&gt;           &lt;dbl&gt;          &lt;dbl&gt;\n1 1               122.        329.           29.1           178. \n2 2               296.        591.           44.2           380. \n3 3               181.        715.           94.3           620. \n4 4                84.8       472.           75.4           473. \n5 5               222.        508.           40.0           199. \n6 6               235.        204.            7.45           61.5\n# ℹ 1 more variable: mean_COMPUTER_PR &lt;dbl&gt;"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626 - Geospatial Analytics and Applications",
    "section": "",
    "text": "Hello! I’m Lucas Luo, an enthusiast in geospatial analytics with a deep interest in leveraging cutting-edge technology to solve complex spatial problems. My background in data analysis has fueled my passion for exploring how data and technology intersect to create powerful insights.\nIn this course, I aim to deepen my understanding of geospatial tools and apply these skills to real-world scenarios. I believe that geospatial analytics is a key to unlocking new possibilities in various fields, from urban planning to environmental conservation.\n\n\n\nAs I embark on this journey, I expect to: - Expand my technical skills in geospatial data analysis. - Engage in hands-on exercises that challenge my understanding. - Collaborate with like-minded peers who are passionate about technology and data. - Innovate by applying course concepts to new and exciting projects.\nI look forward to exploring the dynamic field of geospatial analytics and discovering how we can use these tools to drive meaningful change.\n\nStay curious, keep exploring, and let’s dive into the world of geospatial analytics together!"
  },
  {
    "objectID": "index.html#about-me",
    "href": "index.html#about-me",
    "title": "ISSS626 - Geospatial Analytics and Applications",
    "section": "",
    "text": "Hello! I’m Lucas Luo, an enthusiast in geospatial analytics with a deep interest in leveraging cutting-edge technology to solve complex spatial problems. My background in data analysis has fueled my passion for exploring how data and technology intersect to create powerful insights.\nIn this course, I aim to deepen my understanding of geospatial tools and apply these skills to real-world scenarios. I believe that geospatial analytics is a key to unlocking new possibilities in various fields, from urban planning to environmental conservation."
  },
  {
    "objectID": "index.html#course-expectations",
    "href": "index.html#course-expectations",
    "title": "ISSS626 - Geospatial Analytics and Applications",
    "section": "",
    "text": "As I embark on this journey, I expect to: - Expand my technical skills in geospatial data analysis. - Engage in hands-on exercises that challenge my understanding. - Collaborate with like-minded peers who are passionate about technology and data. - Innovate by applying course concepts to new and exciting projects.\nI look forward to exploring the dynamic field of geospatial analytics and discovering how we can use these tools to drive meaningful change.\n\nStay curious, keep exploring, and let’s dive into the world of geospatial analytics together!"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "My Data Processing Journey 🛠️\n\n\n\nI started running the rendering process 3 days ago.\nI encountered multiple memory issues, missing packages, and code debugging.\nEvery time I tried rendering, it took 5 hours to finish… or crash! 😅\nAfter numerous debugging sessions, I managed to reduce the data size, clean up the code, and finally, after 3 days, the rendering is successful! 🎉\n\n\nEven though I shrank the data to 1/10 of its original size and optimized the code and follow step in piazza, rendering was still a challenge.\nBut the process was enlightening, and I have gained valuable debugging skills along the way.\n\n\n\n\nGood news: The code is now running smoothly.\nI’m currently working on the K-function analysis, as the next milestone.\nThank you for your patience, and I’ll keep you updated on my progress! 😊"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#what-i-learned",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#what-i-learned",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Even though I shrank the data to 1/10 of its original size and optimized the code and follow step in piazza, rendering was still a challenge.\nBut the process was enlightening, and I have gained valuable debugging skills along the way."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#current-status",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#current-status",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "Good news: The code is now running smoothly.\nI’m currently working on the K-function analysis, as the next milestone.\nThank you for your patience, and I’ll keep you updated on my progress! 😊"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#getting-started",
    "title": "Take-home Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nTo begin, several R packages are loaded for different purposes such as spatial data processing, network analysis, and visualization:\n\n\nCode\npacman::p_load(sf, sfdep, tmap, tidyverse, spNetwork, spacetime, spatstat, ggplot2)\n\n\nsf (Simple Features): Provides tools for manipulating and analyzing spatial data, specifically through sf objects which store geometries like points, lines, and polygons.\nsfdep: Used for spatial dependence analysis, including functions for working with neighbors and performing spatial lag models. tmap: A package designed for creating both static and interactive maps. It offers tools for geospatial data visualization, which is critical for this analysis to present accident hotspots and spatial patterns effectively. tidyverse: A collection of R packages that simplifies data manipulation, visualization, and exploration through functions like dplyr, ggplot2, and tibble.\nspNetwork: A specialized package for network-based spatial analysis. It supports functions like network-constrained Kernel Density Estimation (NKDE) and network-constrained K-function analysis.\nspacetime: Provides classes and methods for spatio-temporal data, allowing analysis over both space and time. stpp: Designed for space-time point process modeling and simulation. Useful for detecting spatio-temporal clusters and patterns in the accident data.\nspatstat: A package for spatial point pattern analysis, providing tools for calculating K-functions and conducting spatial statistics over road networks.\n##Importing Data ### 1. Load and Clean Accident Data\n\n\nCode\ncar_acc &lt;- read_csv(\"data/rawdata/thai_road_accident_2019_2022.csv\") %&gt;%\n\n   # Remove rows with missing longitude or latitude\n  filter(!is.na(longitude) & !is.na(latitude)) %&gt;%\n\n  # Create new columns for month and day of the week\n  mutate(Month_num= month(incident_datetime)) %&gt;%\n  mutate(Month_fac= month(incident_datetime,label=TRUE,abbr=TRUE))%&gt;%\n  mutate(dayofweek=day(incident_datetime))%&gt;%\n  # Convert the data frame to a spatial sf object\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326) %&gt;%\n\n  # Transform to a different CRS (Coordinate Reference System)\n  st_transform(crs = 32647)\n\n\nread_csv(): Reads the CSV file containing the road accident data. filter(!is.na(longitude) & !is.na(latitude)): Removes any rows where either longitude or latitude is missing, ensuring valid spatial data. mutate(Month_num = month(incident_datetime)): Creates a new column Month_num that extracts the month from the incident_datetime column. mutate(Month_fac = month(incident_datetime, label = TRUE, abbr = TRUE)): Creates a new column Month_fac that formats the month as a labeled and abbreviated factor. mutate(dayofweek = day(incident_datetime)): Creates a new column dayofweek that extracts the day of the month from incident_datetime. st_as_sf(coords = c(“longitude”, “latitude”), crs = 4326): Converts the data into a spatial object with coordinates based on longitude and latitude. CRS 4326 is the WGS84 geographic coordinate system. st_transform(crs = 32647): Transforms the spatial object to UTM zone 47N (EPSG: 32647), which is often used for geographic data in Thailand.\n\n2. Filter Accident Data for BMR (Bangkok Metropolitan Region)\n\n\nCode\n bmr_acc &lt;- car_acc %&gt;%\n   filter(province_en %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n\n\nfilter(province_en %in% c(…)): Filters the accident data to include only accidents occurring in the Bangkok Metropolitan Region, i.e., the six listed provinces.\n\n\n3. Save the Filtered Data for BMR\n\n\nCode\nwrite_rds(bmr_acc,\"data/rds/bmr_acc.rds\")\n\n\n\n\n4. Load Administrative Boundaries\n\n\nCode\nboundaries &lt;- st_read(dsn = \"data/rawdata\",\n                        layer = \"tha_admbnda_adm1_rtsd_20220121\")\n\n\n\n\n5. Filter Boundaries for BMR\n\n\nCode\nbmr_boundary &lt;- boundaries %&gt;%\n  filter(ADM1_EN %in% c(\"Bangkok\", \"Nonthaburi\", \"Nakhon Pathom\", \"Pathum Thani\", \"Samut Prakan\", \"Samut Sakhon\"))\n\n\n\n\n6. Save Filtered BMR Boundaries\n\n\nCode\nwrite_rds(bmr_boundary, \"data/rds/bmr.rds\")\n\n\n\n\n7. Load Road Network Data\n\n\nCode\nroads &lt;- st_read(dsn = \"data/rawdata\",\n                        layer = \"hotosm_tha_roads_lines_shp\")\n\n\n\n\n8. Assign CRS to Road Network\n\n\nCode\nst_crs(roads) &lt;- 4326\n\n\n\n\n9. Clip Roads to BMR Boundaries\n\n\nCode\nbmr_roads &lt;- st_intersection(roads, bmr_boundary)\n\n\n\n\n10. Save the Filtered BMR Roads Data\n\n\nCode\nsaveRDS(bmr_roads,\"data/rds/bmr_roads.rds\")\n\n\n\n\n11. Load the Date from RDS\n\n\nCode\nbmr &lt;- read_rds(\"data/rds/bmr.rds\")\n\n\n\n\nCode\nbmr_roads &lt;- read_rds(\"data/rds/bmr_roads.rds\")\n\n\n\n\nCode\nbmr_acc &lt;- read_rds(\"data/rds/bmr_acc.rds\")"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-exploratory-data-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#eda-exploratory-data-analysis",
    "title": "Take-home Exercise 1",
    "section": "EDA (Exploratory Data Analysis)",
    "text": "EDA (Exploratory Data Analysis)\nThe EDA focuses on visualizing the basic geographic features and accident points within the Bangkok Metropolitan Region (BMR). Here’s a breakdown of each component of the code and the result:\n\nEDA 1: Visualization of Traffic Accidents in the BMR\n\n\nCode\ntm_shape(bmr) + \n  tm_polygons() + \n  tm_shape(bmr_roads) + \n  tm_lines() +  \n  tm_shape(bmr_acc) + \n  tm_dots(col = \"red\", size = 0.1) +  \n  tm_layout(title = \"Road Traffic Accidents in BMR\")\n\ntmap_mode(\"plot\")\n\n\nExplanation of the Code: tm_shape(bmr) + tm_polygons():\nThis part of the code visualizes the boundary of the BMR region by using the polygon data from bmr. The boundary defines the geographic limits of the region under analysis. tm_shape(bmr_roads) + tm_lines():\nThis adds the road network to the visualization. The roads are crucial for understanding the spatial relationship between the accident locations and the infrastructure in the region. tm_shape(bmr_acc) + tm_dots(col = “red”, size = 0.1):\nThis plots the accident locations on the map as red dots. The small dot size ensures that even when multiple accidents occur close to each other, the map remains readable. tm_layout(title = “Road Traffic Accidents in BMR”):\nThis switches the map into interactive mode, allowing users to zoom, pan, and explore the geographic data more dynamically. Result Analysis: Accident Distribution: The red dots represent individual traffic accidents in the BMR. The visualization clearly shows that the accidents are concentrated along the major roads and highways, suggesting that higher traffic volumes and more complex intersections may be contributing to the occurrence of accidents. High-risk Areas: Some road segments appear to have a dense cluster of accidents, which could indicate accident-prone areas. These could be major intersections, busy highways, or areas with challenging road conditions.\n\n\nEDA 2: Monthly Distribution of Traffic Accidents in BMR\n\n\nCode\nmonthly_accidents &lt;- bmr_acc %&gt;%\n  group_by(Month_fac) %&gt;%\n  summarise(count = n())\n\ntm_shape(bmr) +\n  tm_borders() +  \n  tm_shape(bmr_acc) +\n  tm_dots(col = \"Month_fac\", palette = \"Reds\", size = 0.05) +  \n  tm_facets(by = \"Month_fac\", free.coords = FALSE) + \n  tm_layout(title = \"Accidents by Month in BMR\")\n\n\n\n\n\nCode\ntmap_mode(\"plot\") \n\n\nThis visualization illustrates the monthly distribution of traffic accidents in the Bangkok Metropolitan Region (BMR). Accidents are grouped and color-coded by month, showing how accident occurrences vary across the calendar year. This helps in identifying temporal patterns and trends related to seasonal factors, road usage, or external influences (e.g., weather, holidays) that may contribute to the increase or decrease in accidents during specific months. The map uses a facet approach, allowing for a detailed month-by-month comparison, making it easier to visually assess changes in accident distribution across different time periods.\n\n\nEDA 3: Heatmap of Traffic Accident Density in BMR Provinces\n\n\nCode\nbmr$ADM1_EN &lt;- trimws(tolower(bmr$ADM1_EN))\nbmr_acc$province_en &lt;- trimws(tolower(bmr_acc$province_en))\n\n\nsetdiff(bmr$ADM1_EN, bmr_acc$province_en)\n\n\ncharacter(0)\n\n\nCode\nsetdiff(bmr_acc$province_en, bmr$ADM1_EN)\n\n\ncharacter(0)\n\n\nCode\naccidents_by_province &lt;- bmr_acc %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(accident_count = n())\n\nbmr_df &lt;- st_drop_geometry(bmr)\n\n\naccidents_by_province &lt;- accidents_by_province %&gt;% \n  mutate(province_en = tolower(province_en)) \nbmr_df &lt;- bmr_df %&gt;% \n  mutate(ADM1_EN = tolower(ADM1_EN))\n\nbmr_with_accidents &lt;- left_join(bmr_df, accidents_by_province, by = c(\"ADM1_EN\" = \"province_en\"))\n# Reorder columns to ensure ADM1_EN is the first\nbmr_with_accidents &lt;- bmr_with_accidents %&gt;%\n  select(ADM1_EN, everything())\n\n\nbmr_with_accidents_sf &lt;- st_as_sf(bmr_with_accidents, geometry = bmr$geometry)\ntmap_mode(\"view\")\ntm_shape(bmr_with_accidents_sf) +\n  tm_polygons(\"accident_count\", \n              style = \"pretty\", \n              palette = \"Reds\", \n              title = \"Accidents per Province\", \n              popup.vars = c(\"Province\" = \"ADM1_EN\", \"Accidents\" = \"accident_count\"), \n              popup.format = list(digits = 0)) + \n  tm_layout(title = \"Accident Count Heatmap in BMR\", legend.format = list(text.separator = \"-\"))\n\n\n\n\n\n\n\nExplanation: Data Preparation:\nAccident Data Processing: We started by reading in the accident dataset and filtering out rows where the coordinates (latitude, longitude) were missing. We then extracted the relevant date components (month and day of the week) from the accident timestamps for future analysis. The dataset was then converted into a spatial object using the appropriate geographic coordinate system (CRS 4326). Boundary and Road Data: Similarly, we read in the boundary and road data for the entire country of Thailand. We filtered out only the relevant provinces that belong to the Bangkok Metropolitan Region (BMR), which includes Bangkok, Nonthaburi, Nakhon Pathom, Pathum Thani, Samut Prakan, and Samut Sakhon. The roads were intersected with the BMR boundary to limit them to the region we are interested in. Province-Level Accident Count:\nStandardization of Names: Before merging the datasets, we ensured consistency in the naming of provinces across the two datasets (bmr and bmr_acc). We converted all province names to lowercase and removed any extra spaces. Accident Count: We then grouped the accident data by province and counted the total number of accidents for each province. Merging Data:\nWe merged the accident counts with the BMR boundary data to assign the accident data to the spatial geometry of each province. This allows us to visually analyze accident density within each province. Visualization:\nWe used the tmap library to create an interactive heatmap. The accident density for each province is color-coded in shades of red, where darker shades indicate higher accident counts. Hovering over a province will display the exact count of accidents for that region. Result Analysis: The heatmap generated from the data analysis allows us to visually assess which provinces in the BMR have higher accident densities. The interactive aspect lets users hover over each province to see the accident count, making it easy to compare different regions. Key observations from this visualization could include:\nBangkok likely has the highest density of accidents due to its high population density and traffic volume. Samut Prakan and Nonthaburi may also show significant accident counts due to their proximity to Bangkok and the presence of major highways. Further analysis can be done by looking into different time periods (day vs. night, weekdays vs. weekends) or by exploring specific road networks using KDE methods to identify high-risk areas. The insights gained from this analysis can help in urban planning, improving road safety measures, and optimizing traffic management to reduce accidents in high-density areas."
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#network-kde-nkde-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#network-kde-nkde-analysis",
    "title": "Take-home Exercise 1",
    "section": "Network KDE (NKDE) Analysis",
    "text": "Network KDE (NKDE) Analysis\n\n1.road-data preparation：\n\n\nCode\nbmr_roads &lt;- bmr_roads %&gt;%\n  filter(highway %in% c(\"motorway\", \"trunk\", \"primary\", \"secondary\"))\n\nbmr_city &lt;- st_read(dsn = \"data/rawdata\",\n                        layer = \"tha_admbnda_adm2_rtsd_20220121\")\n\n\nReading layer `tha_admbnda_adm2_rtsd_20220121' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex01/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 928 features and 19 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\n\nCode\n# Step 1: \nSamutPrakan_roads &lt;- bmr_roads %&gt;%\n  filter(ADM1_EN == \"Samut Prakan\")\n\nbangkok_roads &lt;- bmr_roads %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\n\n# Step 2: \nSamutPrakan_boundary &lt;-bmr_city %&gt;%\n  filter(ADM1_EN == \"Samut Prakan\")\n\nbangkok_boundary &lt;- bmr_city %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\n\n\nSamutPrakan_roads_intersection &lt;- st_intersection(SamutPrakan_roads,SamutPrakan_boundary)\n\n\nbangkok_roads_intersection &lt;- st_intersection(bangkok_roads, bangkok_boundary)\n\n\n\n\n2.Choosing city-data：\n\n\nCode\nbangkok_boundary &lt;- bmr_city %&gt;%\n  filter(ADM1_EN == \"Bangkok\")\n\nSamutPrakan_boundary &lt;- bmr_city %&gt;%\n  filter(ADM1_EN == \"Samut Prakan\")\n\n\n\n\n3.Choosing acc-data：\n\n\nCode\nbangkok_acc_data &lt;- bmr_acc %&gt;%\n  filter(province_en == \"bangkok\")\n\nSamutPrakan_acc_data &lt;- bmr_acc %&gt;%\n  filter(province_en == \"samut prakan\")\n\n\n\n\n4.linestring：\n\n\nCode\ntarget_crs &lt;- 32647  # UTM Zone 47N\n\nbangkok_acc_data &lt;- st_transform(bangkok_acc_data, crs = target_crs)\nbangkok_roads_intersection &lt;- st_transform(bangkok_roads_intersection, crs = target_crs)\nbangkok_boundary &lt;- st_transform(bangkok_boundary, crs = target_crs)\n\n\nacc_in_bangkok &lt;- st_intersection(bangkok_acc_data, bangkok_boundary)\nroads_in_bangkok &lt;- st_intersection(bangkok_roads_intersection, bangkok_boundary)\n\n\nroads_in_bangkok &lt;- roads_in_bangkok %&gt;%\n  filter(st_geometry_type(roads_in_bangkok) %in% c(\"LINESTRING\", \"MULTILINESTRING\"))\n\n\nroads_in_bangkok &lt;- st_cast(roads_in_bangkok, \"LINESTRING\", group_or_split = TRUE)\n\n\nSamutPrakan_acc_data &lt;- st_transform(SamutPrakan_acc_data, crs = target_crs)\nSamutPrakan_roads_intersection &lt;- st_transform(SamutPrakan_roads_intersection, crs = target_crs)\nSamutPrakan_boundary &lt;- st_transform(SamutPrakan_boundary, crs = target_crs)\n\nacc_in_SamutPrakan &lt;- st_intersection(SamutPrakan_acc_data, SamutPrakan_boundary)\nroads_in_SamutPrakan &lt;- st_intersection(SamutPrakan_roads_intersection, SamutPrakan_boundary)\n\n\nroads_in_SamutPrakan &lt;- roads_in_SamutPrakan %&gt;%\n  filter(st_geometry_type(roads_in_SamutPrakan) %in% c(\"LINESTRING\", \"MULTILINESTRING\"))\n\nroads_in_SamutPrakan &lt;- st_cast(roads_in_SamutPrakan, \"LINESTRING\", group_or_split = TRUE)\n\n\n\n\n5.acc_in_city：\n\n\nCode\ntarget_crs &lt;- 32647  \n\nbmr_acc_data &lt;- st_transform(bmr_acc, crs = target_crs)\nbmr_boundary &lt;- st_transform(bmr, crs = target_crs)\n\nacc_in_bmr &lt;- st_intersection(bmr_acc_data, bmr_boundary)\n\nroads_in_bangkok_lines &lt;- st_cast(roads_in_bangkok, \"LINESTRING\")\nroads_in_SamutPrakan_lines &lt;- st_cast(roads_in_SamutPrakan, \"LINESTRING\")\n\n\n\n\nCode\nlixels_bangkok &lt;- lixelize_lines(roads_in_bangkok_lines,\n                         10000,       \n                         mindist = 5000)  \n\n\nsamples_bangkok &lt;- lines_center(lixels_bangkok)\n\n\n\n\nCode\nroads_in_SamutPrakan_lines &lt;- st_cast(SamutPrakan_roads_intersection, \"LINESTRING\")\n\nlixels_SamutPrakan &lt;- lixelize_lines(roads_in_SamutPrakan_lines,\n                                      10000,        \n                                      mindist = 5000)  \n\nsamples_SamutPrakan &lt;- lines_center(lixels_SamutPrakan)\n\n\n\n\n6.NKDE:\n\n\nCode\nacc_in_bangkok &lt;- st_as_sf(bangkok_acc_data)\n\nacc_in_SamutPrakan &lt;- st_as_sf(SamutPrakan_acc_data)\n\nnkde_result_bangkok &lt;- nkde(\n  lines = lixels_bangkok,                     \n  events = acc_in_bangkok,                     \n  w = rep(1, nrow(acc_in_bangkok)),            \n  samples = samples_bangkok,                   \n  kernel_name = \"quartic\",                     \n  bw = 500,                                    \n  div = \"bw\",                                 \n  method = \"simple\",                          \n  grid_shape = c(200, 200),                    \n  verbose = FALSE                               \n)\n\nnkde_result_SamutPrakan &lt;- nkde(\n  lines = lixels_SamutPrakan,                 \n  events = acc_in_SamutPrakan,                \n  w = rep(1, nrow(acc_in_SamutPrakan)),      \n  samples = samples_SamutPrakan,              \n  kernel_name = \"quartic\",                     \n  bw = 500,                                   \n  div = \"bw\",                                 \n  method = \"simple\",                          \n  grid_shape = c(200, 200),                   \n  verbose = FALSE                               \n)\n\n\n\n\n7.Density：\n\n\nCode\nsamples_bangkok$density &lt;- nkde_result_bangkok\nlixels_bangkok$density &lt;- nkde_result_bangkok\n\nsamples_bangkok$density &lt;- samples_bangkok$density * 10000\nlixels_bangkok$density &lt;- lixels_bangkok$density * 10000\n\nsamples_SamutPrakan$density &lt;- nkde_result_SamutPrakan\nlixels_SamutPrakan$density &lt;- nkde_result_SamutPrakan\n\nsamples_SamutPrakan$density &lt;- samples_SamutPrakan$density * 10000\nlixels_SamutPrakan$density &lt;- lixels_SamutPrakan$density * 10000\n\n\n\n\n8.Map：\n\n\nCode\ntmap_mode('view')\n# Bangkok\ntm_shape(lixels_bangkok) +\n  tm_lines(col = \"density\", palette = \"-RdYlBu\", title.col = \"Density\", lwd = 5, breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5)) + \n  tm_shape(acc_in_bangkok) +\n  tm_dots(size = 0.1, col = \"blue\", alpha = 0.5, title = \"Accidents\")\n\n\n\n\n\n\n\nCode\n# SamutPrakan\ntm_shape(lixels_SamutPrakan) +\n  tm_lines(col = \"density\", palette = \"-RdYlBu\", title.col = \"Density\", lwd = 5, breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5)) + \n  tm_shape(acc_in_SamutPrakan) +\n  tm_dots(size = 0.1, col = \"blue\", alpha = 0.5, title = \"Accidents\")\n\n\n\n\n\n\n\n##Perform K-function analysis"
  },
  {
    "objectID": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatio-temporal-analysis",
    "href": "Take-home_Ex/Take-home_Ex01/Take-home_Ex01.html#spatio-temporal-analysis",
    "title": "Take-home Exercise 1",
    "section": "Spatio-temporal analysis",
    "text": "Spatio-temporal analysis\nStep 1: Accident Temporal Patterns Aggregate Accident Data by Time: Extract temporal information from the accident data, such as hour of the day, day of the week, or month. This will help you see if accidents tend to happen during certain times of the day or specific months. Visualize Temporal Patterns: Use time series plots or heatmaps to visualize how accident frequencies change over time. You can also look for seasonality or trends (e.g., higher accident rates during specific months or on weekends).\n\n\nCode\n# Extract the hour, day, and month from the accident timestamps\nbangkok_acc_data$hour &lt;- lubridate::hour(bangkok_acc_data$incident_datetime)\nbangkok_acc_data$day &lt;- lubridate::wday(bangkok_acc_data$incident_datetime, label = TRUE)\nbangkok_acc_data$month &lt;- lubridate::month(bangkok_acc_data$incident_datetime, label = TRUE)\n\n# Plot accident frequencies by hour of the day\nggplot(bangkok_acc_data, aes(x = hour)) +\n  geom_histogram(binwidth = 1, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Accidents by Hour of the Day\", x = \"Hour\", y = \"Accident Count\")\n\n\n\n\n\nCode\n# Plot accident frequencies by day of the week\nggplot(bangkok_acc_data, aes(x = day)) +\n  geom_bar(fill = \"darkorange\", color = \"black\") +\n  labs(title = \"Accidents by Day of the Week\", x = \"Day\", y = \"Accident Count\")\n\n\n\n\n\nCode\n# Plot accident frequencies by month\nggplot(bangkok_acc_data, aes(x = month)) +\n  geom_bar(fill = \"darkgreen\", color = \"black\") +\n  labs(title = \"Accidents by Month\", x = \"Month\", y = \"Accident Count\")\n\n\n\n\n\nStep 2: Accident Hotspot Analysis Over Time Group Accidents by Time Intervals: split the accident data into different time intervals (e.g., hourly, daily, or monthly), and then analyze whether certain hours or months are more prone toaccidents. Overlay Spatial Data with Time: Overlay the accident data on the road network for different time periods to visualize whether spatial hotspots change at certain times of day, such as during rush hours.\n\n\nCode\n# Group accidents by time intervals (hourly, daily, etc.)\nhourly_acc &lt;- bangkok_acc_data %&gt;%\n  group_by(hour) %&gt;%\n  summarize(accident_count = n())\n\n# Overlay time-based accident data with road data (for a specific time window)\nrush_hour_acc &lt;- bangkok_acc_data %&gt;% filter(hour &gt;= 7 & hour &lt;= 9)  # Example: Rush hour 7-9 AM\n\n# Use tmap to create spatial visualizations for rush hour accidents\ntmap_mode('plot')\ntm_shape(bangkok_roads) +\n  tm_lines(col = \"gray\", lwd = 1) +\n  tm_shape(rush_hour_acc) +\n  tm_dots(size = 0.1, col = \"red\", alpha = 0.7) +\n  tm_layout(title = \"Accidents during Rush Hour (7-9 AM)\")\n\n\n\n\n\nStep 3: Spatio-Temporal Hotspot Detection Use Kernel Density Estimation (KDE) for Different Time Periods:\nCalculate KDE for accident density, but now do it separately for different time periods (e.g., day vs. night, weekdays vs. weekends). This allows us to see how the spatial distribution of accidents changes over time. Network-based KDE by Time Intervals: ’’’’’’’\n\n\nCode\n# Set target CRS as UTM Zone 47N (EPSG: 32647)\ntarget_crs &lt;- 32647\n\n# Transform the roads to UTM (projected coordinate system)\nbk_roads_projected &lt;- st_transform(bangkok_roads, crs = target_crs)\n\n# Ensure simple geometries (convert MULTILINESTRING to LINESTRING if necessary)\nbmr_roads_simple &lt;- st_cast(bk_roads_projected, \"LINESTRING\")\n\n# Transform accident data to UTM as well\nrush_hour_acc_projected &lt;- st_transform(rush_hour_acc, crs = target_crs)\n\n# Convert time to hour (0-23)\nbangkok_roads$hour &lt;- as.integer(format(bangkok_roads$incident_datetime, \"%H\"))\n\n# Convert date to day of the week (1 = Monday, 7 = Sunday)\nbangkok_roads$weekday &lt;- as.integer(format(bangkok_roads$incident_datetime, \"%u\"))\n\n# Convert time to hour (0-23)\nbangkok_acc_data$hour &lt;- as.integer(format(bangkok_acc_data$incident_datetime, \"%H\"))\n\n# Convert date to day of the week (1 = Monday, 7 = Sunday)\nbangkok_acc_data$weekday &lt;- as.integer(format(bangkok_acc_data$incident_datetime, \"%u\"))\n\n# Define daytime and nighttime accidents (e.g., daytime: 6 AM to 6 PM)\ndaytime_acc &lt;- bangkok_acc_data%&gt;% filter(hour &gt;= 6 & hour &lt; 18)\nnighttime_acc &lt;- bangkok_acc_data %&gt;% filter(hour &lt; 6 | hour &gt;= 18)\n\n# Define weekday and weekend accidents (e.g., weekdays: Monday to Friday)\nweekday_acc &lt;- bangkok_acc_data %&gt;% filter(weekday &gt;= 1 & weekday &lt;= 5)\nweekend_acc &lt;- bangkok_acc_data %&gt;% filter(weekday == 6 | weekday == 7)\n\n# Ensure your roads and accidents are in the projected CRS (UTM)\ndaytime_acc_projected &lt;- st_transform(daytime_acc, crs = target_crs)\nnighttime_acc_projected &lt;- st_transform(nighttime_acc, crs = target_crs)\nweekday_acc_projected &lt;- st_transform(weekday_acc, crs = target_crs)\nweekend_acc_projected &lt;- st_transform(weekend_acc, crs = target_crs)\n\n\n\n\nCode\n# Perform NKDE for daytime\ndaytime_density &lt;- nkde(\n  bmr_roads_simple, \n  daytime_acc_projected,\n  w = rep(1, nrow(daytime_acc_projected)),\n  samples = daytime_acc_projected, \n  kernel_name = \"quartic\", \n  bw = 500, \n  method = \"simple\",\n  verbose = FALSE\n)\n\n# Perform NKDE for nighttime\nnighttime_density &lt;- nkde(\n  bmr_roads_simple, \n  nighttime_acc_projected,\n  w = rep(1, nrow(nighttime_acc_projected)),\n  samples = nighttime_acc_projected, \n  kernel_name = \"quartic\", \n  bw = 500, \n  method = \"simple\",\n  verbose = FALSE\n)\n\n# Perform NKDE for weekdays\nweekday_density &lt;- nkde(\n  bmr_roads_simple, \n  weekday_acc_projected,\n  w = rep(1, nrow(weekday_acc_projected)),\n  samples = weekday_acc_projected, \n  kernel_name = \"quartic\", \n  bw = 500, \n  method = \"simple\",\n  verbose = FALSE\n)\n\n# Perform NKDE for weekends\nweekend_density &lt;- nkde(\n  bmr_roads_simple, \n  weekend_acc_projected,\n  w = rep(1, nrow(weekend_acc_projected)),\n  samples = weekend_acc_projected, \n  kernel_name = \"quartic\", \n  bw = 500, \n  method = \"simple\",\n  verbose = FALSE\n)\n\n\n\n\nCode\n# Check if number of rows in density results matches the road geometries\nif (length(daytime_density) != nrow(bmr_roads_simple)) {\n  # Option 1: Pad the density with NA or 0 for roads without accidents\n  daytime_density &lt;- c(daytime_density, rep(NA, nrow(bmr_roads_simple) - length(daytime_density)))\n}\n\n# Repeat the same for nighttime, weekday, and weekend densities\nif (length(nighttime_density) != nrow(bmr_roads_simple)) {\n  nighttime_density &lt;- c(nighttime_density, rep(NA, nrow(bmr_roads_simple) - length(nighttime_density)))\n}\n\nif (length(weekday_density) != nrow(bmr_roads_simple)) {\n  weekday_density &lt;- c(weekday_density, rep(NA, nrow(bmr_roads_simple) - length(weekday_density)))\n}\n\nif (length(weekend_density) != nrow(bmr_roads_simple)) {\n  weekend_density &lt;- c(weekend_density, rep(NA, nrow(bmr_roads_simple) - length(weekend_density)))\n}\n\n# Convert KDE results to sf objects\ndaytime_density_sf &lt;- st_as_sf(data.frame(geometry = st_geometry(bmr_roads_simple), density = daytime_density))\nnighttime_density_sf &lt;- st_as_sf(data.frame(geometry = st_geometry(bmr_roads_simple), density = nighttime_density))\nweekday_density_sf &lt;- st_as_sf(data.frame(geometry = st_geometry(bmr_roads_simple), density = weekday_density))\nweekend_density_sf &lt;- st_as_sf(data.frame(geometry = st_geometry(bmr_roads_simple), density = weekend_density))\n\n# Visualize KDE for daytime accidents\ntm_shape(bmr_roads_simple) +\n  tm_lines(col = \"gray\") +\n  tm_shape(daytime_density_sf) +\n  tm_lines(col = \"density\", palette = \"Reds\", lwd = 2, title.col = \"Daytime Density\") +\n  tm_layout(title = \"Accident Density during Daytime\")\n\n\n\n\n\nCode\n# Visualize KDE for nighttime accidents\ntm_shape(bmr_roads_simple) +\n  tm_lines(col = \"gray\") +\n  tm_shape(nighttime_density_sf) +\n  tm_lines(col = \"density\", palette = \"Blues\", lwd = 2, title.col = \"Nighttime Density\") +\n  tm_layout(title = \"Accident Density during Nighttime\")\n\n\n\n\n\nCode\n# Visualize KDE for weekday accidents\ntm_shape(bmr_roads_simple) +\n  tm_lines(col = \"gray\") +\n  tm_shape(weekday_density_sf) +\n  tm_lines(col = \"density\", palette = \"Greens\", lwd = 2, title.col = \"Weekda Density\") +\n  tm_layout(title = \"Accident Density during Weekdays\")\n\n\n\n\n\nCode\n# Visualize KDE for weekend accidents\ntm_shape(bmr_roads_simple) +\n  tm_lines(col = \"gray\") +\n  tm_shape(weekend_density_sf) +\n  tm_lines(col = \"density\", palette = \"Purples\", lwd = 2, title.col = \"Weekend Density\") +\n  tm_layout(title = \"Accident Density during Weekends\")\n\n\n\n\n\nCode\ntmap_mode(\"plot\")"
  },
  {
    "objectID": "In-class-Ex/In-class_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "href": "In-class-Ex/In-class_Ex01/data/MPSZ-2019/MPSZ-2019.html",
    "title": "ISSS626-Geospatial Analytics and Applications",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "In-class-Ex/In-class_Ex05/In-class-Ex_05.html",
    "href": "In-class-Ex/In-class_Ex05/In-class-Ex_05.html",
    "title": "In class exercise 05",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, tmap, tidyverse)\n\n#5.4.1 Deriving Queens Contiguity Weights: sfdep methods nb: A neighbor list object as created by st_neighbor. style: Default ‘W’ for row standardized weights. This value can also be ‘B’, ‘C’, ‘U’, ‘minimax’, and ‘S’ allow_zero: if TRUE, assigns zero as a lagged value to zone without neighbors.\n\nhunan &lt;- st_read(dsn = \"data/geospatial\", \n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/In-class-Ex/In-class_Ex05/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nhunan_GDPPC &lt;- left_join(hunan, hunan2012) %&gt;%\n  select(1:4, 7, 15)                             \n\nwm_q=hunan_GDPPC%&gt;%\n  mutate(nb=st_contiguity(geometry),\n         wt=st_weights(nb,\n                       style='W'),\n         .before=1)\n\n#5.4.2 Computing Global Moran’s I\nWe use the global_moran() function to compute this. The below code chunk, using global_moran_test() helps us conduct the test easier.\n\nmoranI= global_moran(wm_q$GDPPC,\n                     wm_q$nb,\n                     wm_q$wt)\n\nglobal_moran_test(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nSince p-value is less than 0.05, we infer that there is indeed a sign of positive autocorrelation.\n#5.4.3 Global Moran’s Permutation Test\nIn practice, we generally use Monte Carlo simulation to conduct tests. This is where the global_moran_perm() function comes into play. The nsim argument is key.\n\nglobal_moran_perm(wm_q$GDPPC,\n                  wm_q$nb,\n                  wm_q$wt,\n                  nsim = 99)\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 100 \n\nstatistic = 0.30075, observed rank = 100, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided\n\n\n#5.4.4 Computing Local Moran’s I\nIn this section, we use the local_moran() function of the sfdep package.\n\nlisa=wm_q%&gt;%\n  mutate(local_moran=local_moran(\n    GDPPC, nb, wt, nsim=99),\n    .before=1)%&gt;%\n  unnest(local_moran)\n\nunnest() helps us combine the data into the intended data-frame.\n#5.4.5 Visualizing p-value of local Moran’s I\n\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_fill('p_ii_sim')+\n  tm_borders(alpha=0.5)+\n  tm_layout(main.title = 'p-value of Local Morans I',\n            main.title.size = 2)\n\n\n\n\n##5.4.5.1 Visualizing Local Moran’s I\n\ntm_shape(lisa)+\n  tm_fill('ii')+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title='Local Morans I of GDPPC',\n            main.title.size = 2)\n\n\n\n\n##5.4.5.2 Visualizing both\n\nmap1= tm_shape(lisa)+\n  tm_fill('p_ii_sim')+\n  tm_borders(alpha=0.5)+\n  tm_layout(main.title = 'p-value of Local Morans I',\n            main.title.size = 2)\n\nmap2= tm_shape(lisa)+\n  tm_fill('ii')+\n  tm_borders(alpha=0.5)+\n  tm_view(set.zoom.limits = c(6,8))+\n  tm_layout(main.title='Local Morans I of GDPPC',\n            main.title.size = 2)\n\ntmap_arrange(map1,map2, ncol=2)\n\n\n\n\n#5.4.6 Visualizing LISA map\nLISA map is a categorical map showing outliers and clusters. There are two types of outliers- high-low and low-high outliers. Likewise, there are two types of clusters namely High-High and Low-Low.\nIn fact, LISA map is an interpreted map by combining local Moran’s I of geographical areas and their respective p values.\n\nlisa_sig=lisa%&gt;%\n  filter(p_ii&lt;0.05)\ntmap_mode('plot')\ntm_shape(lisa)+\n  tm_polygons()+\n  tm_borders(alpha=0.5)+\n  tm_shape(lisa_sig)+\n  tm_fill('mean')+\n  tm_borders(alpha=0.4)\n\n\n\n\nWe see two outliers in the cluster on the North-East region of Hunan which contains mostly high-high regions. rm -f .git/index.lock\n#5.5 Computing Local Gi statistics\n\nwm_idw=hunan_GDPPC%&gt;%\n  mutate(nb=st_contiguity(geometry),\n         wts=st_inverse_distance(nb, geometry, scale=1, alpha=1),\n         .before=1)\n\n\nHCSA=wm_idw%&gt;%\n  mutate(local_Gi=local_gstar_perm(\n    GDPPC, nb, wt, nsim=99),\n    .before=1)%&gt;%\n  unnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi     var_gi std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;      &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0114 0.00000692  0.0165 9.87e-1  0.84         0.42    0.715\n 2 -0.333  Low     0.0104 0.00000464  0.0123 9.90e-1  0.84         0.42    1.11 \n 3  0.281  High    0.0125 0.00000619 -0.127  8.99e-1  0.98         0.49    0.615\n 4  0.411  High    0.0109 0.00000624  0.669  5.03e-1  0.48         0.24    0.782\n 5  0.387  High    0.0116 0.00000896  0.327  7.44e-1  0.66         0.33    0.994\n 6 -0.368  High    0.0116 0.00000650 -0.506  6.13e-1  0.82         0.41    0.944\n 7  3.56   High    0.0146 0.00000614  3.07   2.13e-3  0.04         0.02    0.927\n 8  2.52   High    0.0135 0.00000466  1.77   7.72e-2  0.1          0.05    0.764\n 9  4.56   High    0.0141 0.00000621  3.53   4.08e-4  0.04         0.02    1.27 \n10  1.16   Low     0.0106 0.00000632  1.31   1.92e-1  0.28         0.14    1.39 \n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;\n\n\n\ntm_shape(HCSA)+\n  tm_fill('p_sim')+\n  tm_borders(alpha=0.5)\n\n\n\n\nWe can now visualize the hot and cold spots.\n\nHCSA_sig=HCSA%&gt;%\n  filter(p_sim&lt;0.05)\ntm_shape(HCSA)+\n  tm_polygons()+\n  tm_borders(alpha = 0.5)+\n  tm_shape(HCSA_sig)+\n  tm_fill('cluster')\n  tm_borders(alpha=0.4)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]