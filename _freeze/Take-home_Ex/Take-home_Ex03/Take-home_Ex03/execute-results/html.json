{
  "hash": "88a5f44ee62580076f09f20a3249bba8",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 3b: Predicting HDB Resale Prices with Geographically Weighted Machine Learning Methods\"\nauthor: \"Luo Yuming\"\ndate: \"Oct 24 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n------------------------------------------------------------------------\n\n## 1. Overview\n\nThis exercise focuses on predicting HDB resale prices in Singapore using geographically weighted machine learning methods. By incorporating spatial components, we aim to understand regional patterns and improve prediction accuracy.\n\n------------------------------------------------------------------------\n\n## 2. Objectives\n\nThe goals of this exercise are to:\n\n1.  Apply geographically weighted machine learning models to predict HDB resale prices.\n2.  Assess the performance of different models, including random forest and geographically weighted random forest (GWRF).\n3.  Visualize and interpret spatial variations in predicted prices.\n\n------------------------------------------------------------------------\n\n## 3. Getting Started\n\n### 3.1 Required Packages\n\nIn this exercise, we will use the following packages:\n\n| Package       | Description                                                                                                                                                                                        |\n|----------------|--------------------------------------------------------|\n| **sf**        | Provides functions for reading, processing, and visualizing spatial data in the \"Simple Features\" format, enabling spatial data handling in R.                                                     |\n| **spdep**     | Provides tools for spatial dependency modeling, including spatial weights and measures for spatial autocorrelation, such as Moran's I, useful for detecting spatial patterns.                      |\n| **tidyverse** | A suite of R packages designed for data manipulation (`dplyr`, `tidyr`), visualization (`ggplot2`), and other common data science tasks, improving data handling and analysis.                     |\n| **tmap**      | A flexible package for creating static and interactive maps, allowing cartographic-quality visualizations of spatial data.                                                                         |\n| **GWmodel**   | Contains functions for Geographically Weighted Regression (GWR) and other spatially weighted models, allowing local modeling of spatial data where relationships can vary across geographic space. |\n| **caret**     | A comprehensive package for machine learning, providing tools for model training, tuning, and evaluation, supporting methods like cross-validation and hyperparameter tuning.                      |\n| **ranger**    | An efficient implementation of the random forest algorithm optimized for large datasets, used for predictive modeling and capable of handling both classification and regression tasks.            |\n| **httr**      | Facilitates HTTP requests in R, useful for connecting to APIs like OneMap to retrieve geographic coordinates based on addresses.                                                                   |\n| **jsonlite**  | A package for working with JSON data in R, enabling easy conversion of JSON data from web APIs into R data frames.                                                                                 |\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary packages\npacman::p_load(tidyverse, sf, spdep, GWmodel, tmap, caret, ranger, httr, jsonlite, ggplot2, ggpubr)\n```\n:::\n\n\n### 3.2 The Data\n\nDataset Name Description Format Source HDB Resale Transactions Monthly data on HDB resale transactions, including prices, flat types, and locations. CSV Singapore Open Data Portal Geographical Coordinates Coordinates for each address to map locations. API OneMap API\n\n## 4. Data Preprocessing\n\n### 4.1 Loading and Filtering Resale Data\n\n#### 4.1.1 Geospatial Data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial\", layer = \"MP14_SUBZONE_WEB_PL\") %>%\n  st_transform(3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbus_stops <- st_read(dsn = \"data/geospatial\", layer = \"BusStop\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `BusStop' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 5166 features and 3 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 3970.122 ymin: 26482.1 xmax: 48285.52 ymax: 52983.82\nProjected CRS: SVY21\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_stations <- st_read(dsn = \"data/geospatial\", layer = \"RapidTransitSystemStation\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `RapidTransitSystemStation' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex03/data/geospatial' \n  using driver `ESRI Shapefile'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in CPL_read_ogr(dsn, layer, query, as.character(options), quiet, : GDAL\nMessage 1: Non closed ring detected. To avoid accepting it, set the\nOGR_GEOMETRY_ACCEPT_UNCLOSED_RING configuration option to NO\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 230 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 6068.209 ymin: 27478.44 xmax: 45377.5 ymax: 47913.58\nProjected CRS: SVY21\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhawker_center <- st_read(\"data/geospatial/HawkerCentresGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `HawkerCentresGEOJSON' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex03/data/geospatial/HawkerCentresGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 125 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6974 ymin: 1.272716 xmax: 103.9882 ymax: 1.449017\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nClinics <- st_read(\"data/geospatial/CHASClinics.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `CHASClinics' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex03/data/geospatial/CHASClinics.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1193 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.5818 ymin: 1.016264 xmax: 103.9903 ymax: 1.456037\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsupermarkets <- st_read(\"data/geospatial/SupermarketsGEOJSON.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `SupermarketsGEOJSON' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex03/data/geospatial/SupermarketsGEOJSON.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 526 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6258 ymin: 1.24715 xmax: 104.0036 ymax: 1.461526\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nschoolzone <- st_read(\"data/geospatial/LTASchoolZone.geojson\") %>%\n  st_transform(crs = 3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `LTASchoolZone' from data source \n  `/Users/lucasluo/Desktop/SMU/Courses/Term3 Aug-Dec/ISSS626-Geospatial Analytics and Applications/lucasluo6/ISSS626/Take-home_Ex/Take-home_Ex03/data/geospatial/LTASchoolZone.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 211 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.687 ymin: 1.272736 xmax: 103.9668 ymax: 1.457587\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in CPL_transform(x, crs, aoi, pipeline, reverse, desired_accuracy, :\nGDAL Message 1: Sub-geometry 0 has coordinate dimension 2, but container has 3\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in CPL_transform(x, crs, aoi, pipeline, reverse, desired_accuracy, :\nGDAL Message 1: Sub-geometry 1 has coordinate dimension 2, but container has 3\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nresale <- read_csv(\"data/aspatial/resale.csv\") %>%\n  filter(month >= \"2023-01\" & month <= \"2024-09\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 192613 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\n::: panel-tabset\nNote loads the resale data and filters it to only include transactions from January 2023 to September 2024. glimpse() provides an overview of the data structure and variables.\n:::\n\n### 4.2 Data Transformation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_tidy <- resale %>%\n  mutate(address = paste(block,street_name)) %>%\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2)))%>%\n  mutate(remaining_lease_mth = as.integer(\n    str_sub(remaining_lease, 9, 11)))\n```\n:::\n\n\n::: panel-tabset\nNote This transformation combines block and street name into a single address field and extracts remaining_lease_yr and remaining_lease_mth for further analysis.\n:::\n\n### 4.3 Selecting September 2024 Transactions and Unique Addresses\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresale_selected <- resale_tidy %>%\n  filter(month == \"2024-09\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nadd_list <- sort(unique(resale_selected$address))\n```\n:::\n\n\n::: panel-tabset\nNote filters the dataset to only include September 2024 transactions and extracts unique addresses to be geocoded.\n:::\n\n### 4.4 Geocoding Addresses with OneMap API\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_coords <- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords <- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r <- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data <- fromJSON(rawToChar(r$content))\n    found <- data$found\n    res <- data$results\n    \n    # Create a new data frame for each address\n    new_row <- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal <- res$POSTAL \n      lat <- res$LATITUDE\n      lng <- res$LONGITUDE\n      new_row <- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found > 1){\n      # Remove those with NIL as postal\n      res_sub <- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row <- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 <- head(res_sub, n = 1)\n        postal <- top1$POSTAL \n        lat <- top1$LATITUDE\n        lng <- top1$LONGITUDE\n        new_row <- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row <- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords <- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- get_coords(add_list)\n```\n:::\n\n\n::: panel-tabset\nNote This function get_coords uses the OneMap API to retrieve coordinates (latitude and longitude) for each unique address in add_list. It handles cases where multiple or no results are returned for an address.\n:::\n\n### 4.5 Saving the Geocoded Coordinates\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(coords, \"data/rds/coords.rds\")\n```\n:::\n\n\n::: panel-tabset\nNote The geocoded coordinates are saved to an RDS file to avoid re-running the API calls, making future analyses more efficient.\n:::\n\n### 4.6 Data Wrangling and Joining Coordinates\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join coordinates with filtered resale data\nresale_geo <- resale_selected %>%\n  left_join(coords, by = \"address\") %>%\n  filter(!is.na(latitude) & !is.na(longitude))\n```\n:::\n\n\n::: panel-tabset\nNote This code joins the geocoded coordinates with the filtered resale data, creating a geospatial dataset with latitude and longitude fields for further spatial analysis.\n:::\n\n## 5. Exploratory Data Analysis (EDA)\n\nIn this section, we’ll use statistical graphics functions from packages like ggplot2 and tmap to conduct exploratory data analysis (EDA) of HDB resale data. This analysis will help us understand the feature distributions and spatial patterns of the data.\n\n### 5.1 Analyzing HDB Resale Price Distribution\n\nWe start by plotting the distribution of resale prices to observe skewness or outliers in the data. The code below creates an initial histogram of resale price distribution:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram showing HDB resale price distribution\nggplot(data = resale_geo, aes(x = resale_price)) +\n  geom_histogram(bins = 20, color = \"black\", fill = \"light blue\") +\n  labs(title = \"Distribution of HDB Resale Prices\", x = \"Resale Price\", y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: panel-tabset\nNote This plot shows the distribution of HDB resale prices. If the distribution is right-skewed (indicating more units sold at relatively lower prices), we may consider log-transforming the data for normalization.\n:::\n\n### 5.2 Log Transformation of Price Distribution\n\nLog-transforming resale prices can help reduce skewness, making the model more stable when handling price data. The following code creates a histogram for the log-transformed resale prices:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Log transformation\nresale_geo <- resale_geo %>%\n  mutate(log_resale_price = log(resale_price))\n\n# Plotting log-transformed price distribution\nggplot(data=resale_geo, aes(x=log_resale_price)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") +\n  labs(title = \"Log-Transformed Distribution of HDB Resale Prices\", x = \"Log Resale Price\", y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\nAfter log transformation, the distribution shows less skewness, which can help stabilize model performance.\n\n### 5.3 Distribution Analysis of Multiple Variables\n\nTo better understand the distribution of other important variables, we can generate multiple histograms using ggarrange(). The code below shows histograms for floor area, remaining lease, storey range, and other key features:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Individual histograms for several variables\nfloor_area <- ggplot(data=resale_geo, aes(x=floor_area_sqm)) + \n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") + labs(title = \"Floor Area (sqm)\")\n\nremaining_lease <- ggplot(data=resale_geo, aes(x=remaining_lease_yr)) +\n  geom_histogram(bins=20, color=\"black\", fill=\"light blue\") + labs(title = \"Remaining Lease (Years)\")\n\nstorey_range <- ggplot(data=resale_geo, aes(x=storey_range)) +\n  geom_bar(color=\"black\", fill=\"light blue\") + labs(title = \"Storey Range\")\n\n# Combine histograms using ggarrange()\nggarrange(floor_area, remaining_lease, storey_range, ncol = 2, nrow = 2)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nThese multiple variable distribution plots allow us to better understand the range and shape of each feature.\n\n### 5.4 Spatial Distribution of Resale Prices\n\nBy visualizing the spatial distribution of HDB resale prices, we can observe price differences across regions and identify potential spatial clustering patterns.\n\n\n````{=html}\n<!--```{r}\n# Visualizing the geographical distribution of resale prices with tmap\ntmap_mode(\"view\")\ntm_shape(mpsz_svy21) +\n  tm_polygons() +\n  tm_shape(resale_geo) +\n  tm_dots(col = \"resale_price\", alpha = 0.6, style = \"quantile\", title = \"Resale Price\") +\n  tm_view(set.zoom.limits = c(11, 14))\n```-->\n````\n\n\nThis map shows the spatial distribution of HDB resale prices, helping identify regions with high and low resale prices.\n\n### 5.5 Analyzing the Relationship Between Price and Other Variables\n\nWe can use scatter plots to explore relationships between different variables, such as resale price and floor area, resale price and remaining lease, etc. The code below creates a scatter plot between price and floor area:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Scatter plot for resale price vs floor area\nggplot(data=resale_geo, aes(x=floor_area_sqm, y=resale_price)) +\n  geom_point(alpha=0.5) +\n  labs(title = \"Scatter Plot of Resale Price vs Floor Area\", x = \"Floor Area (sqm)\", y = \"Resale Price\") +\n  geom_smooth(method=\"lm\", color=\"red\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n:::\n\n::: {.cell-output-display}\n![](Take-home_Ex03_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n### 5.6 Correlation Matrix of Features\n\nBy visualizing a correlation matrix heatmap, we can identify highly correlated features, which may help in feature selection for subsequent modeling.\n",
    "supporting": [
      "Take-home_Ex03_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}