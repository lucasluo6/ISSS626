---
title: "Hands-on_Ex04"
author: "Luo Yuming"
date: "Sep 16 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

------------------------------------------------------------------------
#8 Spatial Weights and Applications
```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr, ggstatsplot, GWmodel)   
```
##8.1 Overview
In this hands-on exercise, you will learn how to compute spatial weights using R. By the end to this hands-on exercise, you will be able to:

import geospatial data using appropriate function(s) of sf package,
import csv file using appropriate function of readr package,
perform relational join using appropriate join function of dplyr package,
compute spatial weights using appropriate functions of spdep package, and
calculate spatially lagged variables using appropriate functions of spdep package.

##8.2 The Study Area and Data
Two data sets will be used in this hands-on exercise, they are:

Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.
Hunan_2012.csv: This csv file contains selected Hunanâ€™s local development indicators in 2012.

##8.3 Getting the Data Into R Environment
```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```
###Performing relational join
```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```
##8.4 Visualising Regional Development Indicator
```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```
##8.5 Computing Contiguity Spatial Weights
###8.5.1 Computing (QUEEN) contiguity based neighbours
```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
wm_q[[1]]
hunan$County[1]
hunan$NAME_3[c(2,3,4,57,85)]
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
str(wm_q)
```

###8.5.2 Creating (ROOK) contiguity based neighbours
```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

###8.5.3 Visualising contiguity weights
```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
coords <- cbind(longitude, latitude)
head(coords)
```
####8.5.3.1 Plotting Queen contiguity based neighbours map
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```
####8.5.3.2 Plotting Rook contiguity based neighbours map
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
####8.5.3.3 Plotting both Queen and Rook contiguity based neighbours maps
```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
##8.6 Computing distance based neighbours
how to derive distance-based weight matrices by using dnearneigh() of spdep package.
###8.6.1 Determine the cut-off distance
```{r}
#coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```
###8.6.2 Computing fixed distance weight matrix
```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

```{r}
str(wm_d62)
table(hunan$County, card(wm_d62))
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
table(n_comp$comp.id)
```
####8.6.2.1 Plotting fixed distance weight matrix
```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```
```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```
###8.6.3 Computing adaptive distance weight matrix
```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
str(knn6)
```
####8.6.3.1 Plotting distance based neighbours
```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```
##8.7 Weights based on IDW
```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```
##8.8 Row-standardised Weights Matrix
```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q

rswm_q$weights[10]


rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids

rswm_ids$weights[1]

summary(unlist(rswm_ids$weights))
```
##8.9 Application of Spatial Weight Matrix
###8.9.1 Spatial lag with row-standardized weights
```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
head(hunan)
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```
### 8.9.2 Spatial lag as a sum of neighboring values
```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2

lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")

lag_sum
hunan <- left_join(hunan, lag.res)
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### 8.9.3 Spatial window average
```{r}
wm_qs <- include.self(wm_q)
wm_qs[[1]]

wm_qs <- nb2listw(wm_qs)
wm_qs

lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc

lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan <- left_join(hunan, lag_wm_qs.res)

hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```
### 8.9.4 Spatial window sum
```{r}
wm_qs <- include.self(wm_q)
wm_qs
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
hunan <- left_join(hunan, w_sum_gdppc.res)
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```