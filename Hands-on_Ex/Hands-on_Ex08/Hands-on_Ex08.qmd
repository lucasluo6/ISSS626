---
title: "Hands-on_Ex03"
author: "Luo Yuming"
date: "Oct 18 2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  message: false
  freeze: true
---

------------------------------------------------------------------------

# 14  Geographically Weighted Predictive Models
## 14.1 Overview
Predictive modelling uses statistical learning or machine learning techniques to predict outcomes. By and large, the event one wants to predict is in the future. However, a set of known outcome and predictors (also known as variables) will be used to calibrate the predictive models.

Geospatial predictive modelling is conceptually rooted in the principle that the occurrences of events being modeled are limited in distribution. When geographically referenced data are used, occurrences of events are neither uniform nor random in distribution over space. There are geospatial factors (infrastructure, sociocultural, topographic, etc.) that constrain and influence where the locations of events occur. Geospatial predictive modeling attempts to describe those constraints and influences by spatially correlating occurrences of historical geospatial locations with environmental factors that represent those constraints and influences.

### 14.1.1 Learning outcome
In this in-class exercise, you will learn how to build predictive model by using geographical random forest method. By the end of this hands-on exercise, you will acquire the skills of:

preparing training and test data sets by using appropriate data sampling methods,
calibrating predictive models by using both geospatial statistical learning and machine learning methods,
comparing and selecting the best model for predicting the future outcome,
predicting the future outcomes by using the best model calibrated.

## 14.2 The Data
Aspatial dataset:
HDB Resale data: a list of HDB resale transacted prices in Singapore from Jan 2017 onwards. It is in csv format which can be downloaded from Data.gov.sg.

Geospatial dataset:
MP14_SUBZONE_WEB_PL: a polygon feature data providing information of URA 2014 Master Plan Planning Subzone boundary data. It is in ESRI shapefile format. This data set was also downloaded from Data.gov.sg
 
Locational factors with geographic coordinates:
  Eldercare data is a list of eldercare in Singapore. It is in shapefile format.
  Hawker Centre data is a list of hawker centres in Singapore. It is in geojson format.
  Parks data is a list of parks in Singapore. It is in geojson format.
  Supermarket data is a list of supermarkets in Singapore. It is in geojson format.
  CHAS clinics data is a list of CHAS clinics in Singapore. It is in geojson format.
  Childcare service data is a list of childcare services in Singapore. It is in geojson format.
  Kindergartens data is a list of kindergartens in Singapore. It is in geojson format.

  MRT data is a list of MRT/LRT stations in Singapore with the station names and codes. It is in shapefile format.
  Bus stops data is a list of bus stops in Singapore. It is in shapefile format.

Locational factors without geographic coordinates:
  Primary school data is extracted from the list on General information of schools from data.gov portal. It is in csv format.
  CBD coordinates obtained from Google.
  Shopping malls data is a list of Shopping malls in Singapore obtained from Wikipedia.
  Good primary schools is a list of primary schools that are ordered in ranking in terms of popularity and this can be found at Local Salary Forum.
  
## 14.3 Installing and Loading R packages 
```{r}
pacman::p_load(sf, spdep, GWmodel, SpatialML, 
               tmap, rsample, Metrics, tidyverse)
```
  
## 14.4 Preparing Data

### 14.4.1 Reading data file to rds
```{r}
mdata <- read_rds("data/model/mdata.rds")
```

### 14.4.2 Data Sampling
The entire data are split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.
```{r}
set.seed(1234)
resale_split <- initial_split(mdata, 
                              prop = 6.5/10,)
train_data <- training(resale_split)
test_data <- testing(resale_split)
```

```{r}
write_rds(train_data, "data/model/train_data.rds")
write_rds(test_data, "data/model/test_data.rds")
```

## 14.5 Computing Correlation Matrix
```{r}
mdata_nogeo <- mdata %>%
  st_drop_geometry()
corrplot::corrplot(cor(mdata_nogeo[, 2:17]), 
                   diag = FALSE, 
                   order = "AOE",
                   tl.pos = "td", 
                   tl.cex = 0.5, 
                   method = "number", 
                   type = "upper")
```

## 14.6 Retriving the Stored Data
```{r}
train_data <- read_rds("data/model/train_data.rds")
test_data <- read_rds("data/model/test_data.rds")
```

## 14.7 Building a non-spatial multiple linear regression
```{r}
price_mlr <- lm(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                data=train_data)
summary(price_mlr)
```

```{r}
write_rds(price_mlr, "data/model/price_mlr.rds" ) 
```
  
## 14.8 gwr predictive method

### 14.8.1 Converting the sf data.frame to SpatialPointDataFrame
```{r}
train_data_sp <- as_Spatial(train_data)
train_data_sp
```
###14.8.2 Computing adaptive bandwidth

```{r}
bw_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=train_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

```{r}
write_rds(bw_adaptive, "data/model/bw_adaptive.rds")
```

### 14.8.3 Constructing the adaptive bandwidth gwr model
```{r}
bw_adaptive <- read_rds("data/model/bw_adaptive.rds")

gwr_adaptive <- gwr.basic(formula = resale_price ~
                            floor_area_sqm + storey_order +
                            remaining_lease_mths + PROX_CBD + 
                            PROX_ELDERLYCARE + PROX_HAWKER +
                            PROX_MRT + PROX_PARK + PROX_MALL + 
                            PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                            WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                            WITHIN_1KM_PRISCH,
                          data=train_data_sp,
                          bw=bw_adaptive, 
                          kernel = 'gaussian', 
                          adaptive=TRUE,
                          longlat = FALSE)

write_rds(gwr_adaptive, "data/model/gwr_adaptive.rds")
```

### 14.8.4 Retrieve gwr output object

```{r}
gwr_adaptive <- read_rds("data/model/gwr_adaptive.rds")

gwr_adaptive
```

### 14.8.5 Converting the test data from sf data.frame to SpatialPointDataFrame
```{r}
test_data_sp <- test_data %>%
  as_Spatial()
test_data_sp
```
### 14.8.6 Computing adaptive bandwidth for the test data
```{r}
gwr_bw_test_adaptive <- bw.gwr(resale_price ~ floor_area_sqm +
                  storey_order + remaining_lease_mths +
                  PROX_CBD + PROX_ELDERLYCARE + PROX_HAWKER +
                  PROX_MRT + PROX_PARK + PROX_MALL + 
                  PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                  WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                  WITHIN_1KM_PRISCH,
                  data=test_data_sp,
                  approach="CV",
                  kernel="gaussian",
                  adaptive=TRUE,
                  longlat=FALSE)
```

### 14.8.7 Computing predicted values of the test data
# ```{r}
# gwr_pred <- gwr.predict(formula = resale_price ~
#                           floor_area_sqm + storey_order +
#                           remaining_lease_mths + PROX_CBD + 
#                           PROX_ELDERLYCARE + PROX_HAWKER + 
#                           PROX_MRT + PROX_PARK + PROX_MALL + 
#                           PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
#                           WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
#                           WITHIN_1KM_PRISCH, 
#                         data=train_data_sp, 
#                         predictdata = test_data_sp, 
#                         bw=25, 
#                         kernel = 'gaussian', 
#                         adaptive=TRUE, 
#                         longlat = FALSE)
# ```

## 14.9 Preparing coordinates data

###14.9.1 Extracting coordinates data
```{r}
coords <- st_coordinates(mdata)
coords_train <- st_coordinates(train_data)
coords_test <- st_coordinates(test_data)

coords_train <- write_rds(coords_train, "data/model/coords_train.rds" )
coords_test <- write_rds(coords_test, "data/model/coords_test.rds" )
```

### 14.9.2 Droping geometry field
```{r}
train_data <- train_data %>% 
  st_drop_geometry()
```

###14.10 Calibrating Random Forest Model
```{r}
set.seed(1234)
rf <- ranger(resale_price ~ floor_area_sqm + storey_order + 
               remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE + 
               PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL + 
               PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
               WITHIN_350M_CHILDCARE + WITHIN_350M_BUS + 
               WITHIN_1KM_PRISCH,
             data=train_data)
rf

write_rds(rf, "data/model/rf.rds")
rf <- read_rds("data/model/rf.rds")
rf
```
## 14.11 Calibrating Geographical Random Forest Model
### 14.11.1 Calibrating using training data
```{r}
train_data_nogeom <- train_data %>%
  st_drop_geometry()

set.seed(1234)
gwRF_adaptive <- grf(formula = resale_price ~ floor_area_sqm + storey_order +
                       remaining_lease_mths + PROX_CBD + PROX_ELDERLYCARE +
                       PROX_HAWKER + PROX_MRT + PROX_PARK + PROX_MALL +
                       PROX_SUPERMARKET + WITHIN_350M_KINDERGARTEN +
                       WITHIN_350M_CHILDCARE + WITHIN_350M_BUS +
                       WITHIN_1KM_PRISCH,
                     dframe=train_data_nogeom, 
                     bw=25,
                     kernel="adaptive",
                     coords=coords_train)

write_rds(gwRF_adaptive, "data/model/gwRF_adaptive.rds")
gwRF_adaptive <- read_rds("data/model/gwRF_adaptive.rds")
```

### 14.11.2 Predicting by using test data
#### 14.11.2.1 Preparing the test data
```{r}
test_data <- cbind(test_data, coords_test) %>%
  st_drop_geometry()
```
####14.11.2.2 Predicting with test data
```{r}
gwRF_pred <- predict.grf(gwRF_adaptive, 
                           test_data, 
                           x.var.name="X",
                           y.var.name="Y", 
                           local.w=1,
                           global.w=0)

GRF_pred <- write_rds(gwRF_pred, "data/model/GRF_pred.rds")


```
#### 14.11.2.3 Converting the predicting output into a data frame
```{r}
GRF_pred <- read_rds("data/model/GRF_pred.rds")
GRF_pred_df <- as.data.frame(GRF_pred)

test_data_p <- cbind(test_data, GRF_pred_df)

write_rds(test_data_p, "data/model/test_data_p.rds")
```

####14.11.3 Calculating Root Mean Square Error
```{r}
rmse(test_data_p$resale_price, 
     test_data_p$GRF_pred)
```
```{r}
ggplot(data = test_data_p,
       aes(x = 　GRF_pred,
           y = resale_price)) +
  geom_point()
```








