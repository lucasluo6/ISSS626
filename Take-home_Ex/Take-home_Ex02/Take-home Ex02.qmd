---
title: "Take-home Exercise 2"
author: "Luo Yuming"
date: "septerber 30, 2024"
date-modified: "Last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
  cache: TRUE
format: 
  html:
    code-fold: true
editor: 
  markdown: 
    wrap: 72
---

# Overview 

## Background 

Tourism significantly contributes to Thailand's economy, accounting for roughly 20% of the GDP. The sector was severely impacted during the COVID-19 pandemic but has been on a recovery path since late 2021. Tourism, however, is unevenly distributed across different regions. This analysis aims to explore the spatial patterns of tourism activity across provinces and identify clusters, outliers, and hot/cold spots through spatial autocorrelation and clustering techniques.



## Objectives 

1.Determine spatial clustering: Identify if tourism indicators (e.g., revenue, number of tourists) are spatially clustered, dispersed, or random across provinces.
2.Detect clusters/outliers: Find provinces that exhibit unusually high or low tourism metrics compared to their neighbors.
3.Visualize spatial patterns: Create maps to display the results of clustering and spatial autocorrelation analysis.

# Data 

## Loading Packages 
We will use several R packages designed for geospatial analysis and clustering, including: 
sf: for handling spatial data. 
spdep: for spatial autocorrelation and spatial cluster analysis.
ggplot2 and tmap: for data visualization and geovisualization. 
ClustGeo: for spatially constrained hierarchical clustering.
tidyverse: for datawrangling and transformation.

```{r}

pacman::p_load(spdep, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

##Dataset Two datasets will be used for this analysis:

Thailand Domestic Tourism Statistics (2019–2023): This dataset contains key tourism indicators like the number of tourists, occupancy rates, and revenue, recorded at the provincial level. 
Thailand Subnational Administrative Boundaries: This spatial dataset provides the geographic boundaries of Thailand's provinces and will be used for mapping and spatial analysis.

# 1. Data Import and Preparation

## 1.1 Import Spatial Data (Thailand's Provincial Boundaries)

```{r}
# Read the shapefile for Thailand's provincial boundaries
thailand_boundaries <- st_read(dsn = "data/raw/geospatial",
                        layer = "tha_admbnda_adm1_rtsd_20220121")

# Inspect the data
print(thailand_boundaries)

# Read the csv for Thailand's tourism data
tourism_data <- read_csv("data/raw/aspatial/thailand_domestic_tourism_2019_2023_ver2.csv") 
# Inspect the dataset
head(tourism_data)
```

## 1.2 Data Cleaning and Preprocessing

Keep only the necessary variables from the Thailand boundaries data.
Ensure province names are aligned between the tourism dataset and the
Thailand boundaries dataset.

To ensure the two datasets (spatial and tourism data) can be combined,
check for consistency in province names. We’ll now clean the tourism
dataset to focus on relevant columns and ensure proper formats for
merging with spatial data.

Cleaning steps:

Filter the data to focus on ratio_tourist_stay. Convert the date column
into a proper date format. Keep the province names in English for later
merging with the spatial data.

```{r}
# Step 1: Select necessary columns from Thailand boundaries data
thailand_boundaries_clean <- thailand_boundaries %>%
  select(ADM1_EN, geometry)  # Keep only the province name and geometry

# Step 2: Remove unnecessary columns (province_thai and region_thai)
tourism_data_clean <- tourism_data %>%
  select(-province_thai, -region_thai)  # Remove columns

# Step 3: Ensure the 'date' is correctly parsed and split into year, month, and day
tourism_data_clean <- tourism_data_clean %>%
  mutate(date = ymd(date),           # Convert 'date' to Date format
         year = year(date),          # Extract 'year'
         month = month(date),        # Extract 'month'
         day = day(date))            # Extract 'day'

# Step 4: Pivot the data to wide format so that each tourism variable has its own column
tourism_data_clean <- tourism_data_clean %>%
  pivot_wider(names_from = variable, values_from = value)

# Step 5: Check for name consistency between datasets
# Create a list of province names from the tourism dataset
tourism_provinces <- unique(tourism_data_clean$province_eng)

# Create a list of province names from the spatial dataset
spatial_provinces <- unique(thailand_boundaries_clean$ADM1_EN)

# Find mismatches
mismatches <- setdiff(tourism_provinces, spatial_provinces)
print(mismatches)  # This will show any provinces with different names in the datasets

```

## 1.3 Resolving Name Inconsistencies:

If mismatches are found, we will correct the province names in the tourism dataset to match those in the "ADM1_EN" column from the spatial dataset. For example, let’s assume that "Phra Nakhon Si Ayutthaya" is spelled differently in both datasets.

```{r}
# Step 6: Correct mismatches in the tourism dataset (example shown for one mismatch)
tourism_data_clean <- tourism_data_clean %>%
  mutate(province_eng = case_when(
    province_eng == "Ayutthaya" ~ "Phra Nakhon Si Ayutthaya",
    TRUE ~ province_eng  # Retain other province names as is
  ))

```

## 1.4 Data Integration with Spatial

```{r}
# Step 7: Merge the cleaned tourism data with spatial boundaries using province names
tourism_sf <- thailand_boundaries_clean %>%
  left_join(tourism_data_clean, by = c("ADM1_EN" = "province_eng"))

# Check if there are any missing values in the 'revenue_all' column
summary(tourism_sf$revenue_all)

# Alternatively, check the rows with NA values
tourism_sf %>% filter(is.na(revenue_all))
# Replace missing values with column means if applicable
tourism_sf <- tourism_sf %>%
  mutate(across(c(no_tourist_all, ratio_tourist_stay, revenue_all), 
                ~ ifelse(is.na(.), mean(., na.rm = TRUE), .)))


# Step 8: Convert the merged data into an sf object
tourism_sf <- st_as_sf(tourism_sf)

# Step 9: Inspect the merged spatial data
head(tourism_sf)

```

# 2. Exploratory Data Analysis (EDA)

##2.1 Summary of Variables We explore the key statistics to understand
the distribution of our tourism indicators.

```{r}
summary(tourism_sf %>%
  select(no_tourist_stay, no_tourist_all, no_tourist_thai, no_tourist_foreign,
         revenue_all, revenue_thai, revenue_foreign))

```

##2.2 Histograms for Distribution

```{r}
# Histogram for total number of tourists
ggplot(tourism_sf, aes(x=no_tourist_all)) +
  geom_histogram(bins=20, color="black", fill="lightblue") +
  labs(title="Distribution of Total Number of Tourists", x="Total Tourists", y="Count")

# Histogram for total revenue
ggplot(tourism_sf, aes(x=revenue_all)) +
  geom_histogram(bins=20, color="black", fill="lightgreen") +
  labs(title="Distribution of Total Tourism Revenue", x="Total Revenue", y="Count")

# Histogram for foreign tourists
ggplot(tourism_sf, aes(x=no_tourist_foreign)) +
  geom_histogram(bins=20, color="black", fill="lightcoral") +
  labs(title="Distribution of Foreign Tourists", x="Foreign Tourists", y="Count")

```

##2.3 Boxplots to Detect Outliers

```{r}
# Boxplot for total tourists
ggplot(tourism_sf, aes(y=no_tourist_all)) +
  geom_boxplot(fill="lightblue") +
  labs(title="Boxplot of Total Number of Tourists", y="Total Tourists")

# Boxplot for total revenue
ggplot(tourism_sf, aes(y=revenue_all)) +
  geom_boxplot(fill="lightgreen") +
  labs(title="Boxplot of Total Tourism Revenue", y="Total Revenue")
```

# 3.Analysis

## 3.1 Spatial Autocorrelation Analysis

Determine if the distribution of key tourism indicators is spatially
clustered, dispersed, or random using global and local spatial
autocorrelation.

###3.1.1 Global Measures of Spatial Autocorrelation

####3.1.1.1 Creating a Queen's Contiguity Spatial Weights Matrix

```{r}
# Step 2: Simplify the geometry (to reduce computational load)
tourism_sf_simplified <- st_simplify(tourism_sf, dTolerance = 10)

# Convert the simplified sf object back to a Spatial object for further analysis
tourism_sp_simplified <- as_Spatial(tourism_sf_simplified)
```

```{r}
tourism_nb_queen <- poly2nb(tourism_sp_simplified, queen = TRUE)

summary(tourism_nb_queen)

```

```{r}
# Convert to spatial weights matrix (row-standardized)
tourism_weights_queen <- nb2listw(tourism_nb_queen, style = "W", zero.policy = TRUE)
```

####3.1.1.2 Global Moran’s I Test

```{r}
# Moran’s I test for global spatial autocorrelation
moran_global <- moran.test(tourism_sf$revenue_all, tourism_weights_queen, zero.policy = TRUE)

# Print Moran's I results
print(moran_global)

```

####3.1.1.3 Visualizing the Moran’s Scatterplot

```{r}
# Moran scatterplot visualization
moran.plot(tourism_sf$revenue_all, tourism_weights_queen, 
           xlab = "Revenue", ylab = "Spatial Lag of Revenue")

```
###3.1.2 Local Measures of Spatial Autocorrelation (LISA)
#### 3.1.2.1 Calculating Local Moran’s
```{r}
# Compute Local Moran’s I (LISA)
local_moran <- localmoran(tourism_sf$revenue_all, tourism_weights_queen, zero.policy = TRUE)

# Append Local Moran's I values and p-values to the dataset
tourism_sf$local_moran_I <- local_moran[,1]
tourism_sf$p_value <- local_moran[,5]
```
#### 3.1.2.2 Visualizing Local Moran’s I Values
```{r}
# Map showing local Moran's I values
tm_shape(tourism_sf) +
  tm_fill(col = "local_moran_I", style = "pretty", palette = "RdBu", title = "Local Moran's I") +
  tm_borders(alpha = 0.5)
```

####3.1.2.3 Mapping Local Moran’s I P-values
```{r}
# Map showing p-values of Local Moran’s I
tm_shape(tourism_sf) +
  tm_fill(col = "p_value", breaks = c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf), palette = "-Blues", title = "Local Moran's I p-values") +
  tm_borders(alpha = 0.5)

```
####3.1.2.4
```{r}
# Map showing p-values of Local Moran’s I
# Visualizing significant clusters (areas where p-value < 0.05)
tm_shape(tourism_sf) +
  tm_fill(col = "p_value", palette = c("grey", "red"), breaks = c(0.05, Inf), title = "Significant Clusters") +
  tm_borders()

```

## 3.2 Hierarchical Cluster Analysis
###3.2.1 Standardizing and Handling Missing Data
```{r}
# Step 1: Standardize tourism variables for clustering and handle missing values
tourism_sf_clean <- tourism_sf %>%
  mutate(across(c(no_tourist_all, ratio_tourist_stay, revenue_all), 
                ~ ifelse(is.na(.), mean(., na.rm = TRUE), .))) %>%
  mutate(across(c(no_tourist_all, ratio_tourist_stay, revenue_all), 
                ~ ( . - min(.) ) / (max(.) - min(.))))  # Min-Max normalization

# Step 2: Remove non-numeric columns (like geometry) from the dataframe before clustering
tourism_sf_clean <- tourism_sf_clean %>%
  st_set_geometry(NULL)  # This will drop the geometry column from the data

# Ensure that the selected columns are numeric, handle non-numeric values
tourism_sf_clean <- tourism_sf_clean %>%
  mutate(across(c(no_tourist_all, ratio_tourist_stay, revenue_all), as.numeric))

# Verify again after conversion
str(tourism_sf_clean %>% select(no_tourist_all, ratio_tourist_stay, revenue_all))


```
###3.2.2 Calculating Euclidean Distance Matrix
```{r}
# Step 3: Calculate the Euclidean distance matrix
proxmat <- dist(tourism_sf_clean %>%
                select(no_tourist_all, ratio_tourist_stay, revenue_all))

# Check the distance matrix
print(proxmat)
```
###3.2.3 Perform Hierarchical Clustering
```{r}
# Step 1: Perform hierarchical clustering using Ward's method
hclust_ward <- hclust(proxmat, method = 'ward.D')

# Step 2: Cut the dendrogram into 6 clusters
clusters <- cutree(hclust_ward, k = 6)

# Step 3: Add clusters to the original sf dataset that still has the geometry
tourism_sf$cluster <- as.factor(clusters)

# Step 4: Visualize the clustering result on the map using the original sf object
tm_shape(tourism_sf) +
  tm_polygons("cluster", title = "Hierarchical Clustering") +
  tm_borders() +
  tm_layout(main.title = "Hierarchical Clustering of Tourism Data")

```

## 3.3 Spatially Constrained Clustering (SKATER Method)
### 3.3.1 Queen's Contiguity Neighbor List
```{r}
summary(tourism_nb_queen)

# Get the coordinates of centroids for plotting
coords <- st_coordinates(st_centroid(st_geometry(tourism_sf)))

# Plot the boundaries and neighbor links
plot(st_geometry(tourism_sf), border = grey(.5))
plot(tourism_nb_queen, coords, col = "blue", add = TRUE)
```
<!-- ###3.3.2Compute Edge Costs for the SKATER Method -->
<!-- ```{r} -->
<!-- # Compute the edge costs for clustering based on tourism variables -->
<!-- lcosts <- nbcosts(tourism_nb_queen, tourism_sf %>% select(no_tourist_all, ratio_tourist_stay, revenue_all)) -->

<!-- # Create a list of spatial weights using the edge costs -->
<!-- tourism_weights <- nb2listw(tourism_nb_queen, lcosts, style = "B") -->
<!-- summary(tourism_weights) -->
<!-- ``` -->

<!-- ###3.3.3 Compute the Minimum Spanning Tree and Perform SKATER Clustering -->
<!-- ```{r} -->
<!-- # Compute the minimum spanning tree -->
<!-- mst <- mstree(tourism_weights) -->

<!-- # Perform SKATER clustering -->
<!-- skater_clusters <- spdep::skater(mst[, 1:2], tourism_sf %>% select(no_tourist_all, ratio_tourist_stay, revenue_all), ncuts = 4) -->

<!-- # Check the cluster assignments -->
<!-- ccs5 <- skater_clusters$groups -->
<!-- table(ccs5) -->
<!-- ``` -->

<!-- ###3.3.4Visualize the Clusters on a Map -->
<!-- ```{r} -->
<!-- # Append the clusters to the dataset -->
<!-- tourism_sf$spatial_cluster <- as.factor(skater_clusters$groups) -->

<!-- # Visualize the SKATER clusters -->
<!-- tm_shape(tourism_sf) + -->
<!--   tm_polygons("spatial_cluster", title = "SKATER Clusters") + -->
<!--   tm_borders() + -->
<!--   tm_layout(main.title = "Spatially Constrained Clustering (SKATER Method)") -->
<!-- ``` -->

<!-- # Final Comparison and Conclusion -->
<!-- ```{r} -->
<!-- # Compare both cluster results side-by-side -->
<!-- tm_hierarchical <- tm_shape(tourism_sf) + -->
<!--   tm_polygons("cluster", title = "Hierarchical Clustering") + -->
<!--   tm_borders() -->

<!-- tm_spatial <- tm_shape(tourism_sf) + -->
<!--   tm_polygons("spatial_cluster", title = "SKATER Clustering") + -->
<!--   tm_borders() -->

<!-- # Arrange both visualizations side-by-side -->
<!-- tmap_arrange(tm_hierarchical, tm_spatial, ncol = 2) -->
<!-- ``` -->





